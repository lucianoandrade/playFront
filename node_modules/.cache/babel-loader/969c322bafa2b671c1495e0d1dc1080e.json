{"ast":null,"code":"var _jsxFileName = \"/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/pages/CodConfirmacao/index.js\";\nimport React from 'react';\nimport { Form, withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { Auth } from \"aws-amplify\";\nimport smartphone from '../../../../assets/icons/smartphone.png';\nimport { withRouter } from 'react-router-dom';\nimport FormField from \"../../components/elements/FormField\";\nimport './styles.scss';\n\nconst confirmSignUp = props => {\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"containerCodConfirm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"lightBox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"lightBoxContent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: smartphone,\n    alt: \"Icone Cel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Confirme seu n\\xFAmero de telefone\"), React.createElement(\"p\", {\n    className: \"paragraph\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Enviamos um c\\xF3digo de confirma\\xE7\\xE3o por SMS para voc\\xEA. Por favor, digite-o abaixo.\"), React.createElement(Form, {\n    className: \"formConfirm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"inputInline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(FormField, {\n    id: \"codConfirm\",\n    type: \"text\",\n    name: \"codigo\",\n    label: \"C\\xF3digo de confirma\\xE7\\xE3o\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    className: \"btnDefault\",\n    type: \"submit\",\n    style: atv(),\n    disabled: !props.isValid,\n    required: props.isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Confirmar\"), React.createElement(\"button\", {\n    className: \"btnSecundary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Reenviar C\\xF3digo\"))))));\n\n  function atv() {\n    const x = props.isValid;\n\n    if (x === true) {\n      return {\n        background: \"#000\"\n      };\n    } else {\n      return {\n        background: \"#BBB\"\n      };\n    }\n  }\n\n  ;\n};\n\nconst ConfirmSignupForm = withRouter(withFormik({\n  mapPropsToValues({\n    codigo\n  }) {\n    return {\n      codigo: codigo || ''\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    codigo: Yup.string().required(\"Campo obrigatório\").length(6, 'Codigo inválido')\n  }),\n\n  handleSubmit({\n    codigo\n  }, {\n    props,\n    setFieldError,\n    setSubmitting\n  }) {\n    setSubmitting(true);\n    console.log('Dados: ', {\n      email: props.history.location.state.email,\n      codigo: codigo\n    });\n    Auth.confirmSignUp(props.history.location.state.email, codigo.toString()).then(result => {\n      setSubmitting(false);\n      Auth.signIn(props.history.location.state.email, props.history.location.state.senha).then(response => {\n        props.history.push('/dadosuser', {\n          initCadastro: props.history.location.state.email,\n          senha: props.history.location.state.senha,\n          codigoconfimacao: codigo\n        });\n        console.log(\"Minhas props no codigo de confirmação são\", props.history.location);\n      }).catch(error => {\n        console.log('Erro ', error);\n        const messageDefault = \"Ocorreu um erro inesperado.\";\n        const selectErrorMessage = {\n          NotAuthorizedException: \"E-mail ou senha incorretos.\",\n          UserNotFoundException: \"O usuário não foi encontrado.\",\n          PasswordResetRequiredException: 'A sua senha foi resetada. Crie uma nova em \"esqueci minha senha\".',\n          InvalidPasswordException: \"A senha deve conter ao mínimo 8 dígitos.\"\n        };\n        return selectErrorMessage[error.code] || messageDefault;\n      });\n    }).catch(error => {\n      console.log('Erro confirmando assinatura: ', error);\n      window.alert('Codigo de confirmação invalido');\n      setSubmitting(false);\n    });\n  }\n\n})(confirmSignUp));\nexport default ConfirmSignupForm;","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/pages/CodConfirmacao/index.js"],"names":["React","Form","withFormik","Yup","Auth","smartphone","withRouter","FormField","confirmSignUp","props","atv","isValid","isSubmitting","x","background","ConfirmSignupForm","mapPropsToValues","codigo","validationSchema","object","shape","string","required","length","handleSubmit","setFieldError","setSubmitting","console","log","email","history","location","state","toString","then","result","signIn","senha","response","push","initCadastro","codigoconfimacao","catch","error","messageDefault","selectErrorMessage","NotAuthorizedException","UserNotFoundException","PasswordResetRequiredException","InvalidPasswordException","code","window","alert"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { Auth } from \"aws-amplify\";\n\nimport smartphone from '../../../../assets/icons/smartphone.png';\nimport { withRouter } from 'react-router-dom';\nimport FormField from \"../../components/elements/FormField\";\n\nimport './styles.scss';\n\nconst confirmSignUp = (props) => {\n  \n  return (\n    <React.Fragment>\n      <div className=\"containerCodConfirm\">\n          <div className=\"lightBox\">\n              <div className=\"lightBoxContent\">\n                  <img src={smartphone} alt=\"Icone Cel\"/>\n                  <h3>Confirme seu número de telefone</h3>\n                  <p className=\"paragraph\">Enviamos um código de confirmação por SMS para você. Por favor, digite-o abaixo.</p>\n                  <Form className=\"formConfirm\">\n                      <div className=\"inputInline\">\n                        <FormField id=\"codConfirm\" type=\"text\" name=\"codigo\" label=\"Código de confirmação\" required />\n                      </div>\n                      <button className=\"btnDefault\" type=\"submit\"  style={atv()} disabled={ !props.isValid } required={props.isSubmitting}>Confirmar</button>\n                      <button className=\"btnSecundary\" type=\"submit\">Reenviar Código</button> \n                  </Form>\n              </div>\n          </div>\n      </div>\n    </React.Fragment>\n  )\n    function atv() { const x = props.isValid; \n    if (x === true) {return({background: `#000`})} else {return({background: `#BBB`}) } }; \n};\n\n\n\nconst ConfirmSignupForm = withRouter(withFormik({\n    mapPropsToValues({ codigo }) {\n      return {\n        codigo: codigo || ''\n      }\n    },\n    validationSchema: Yup.object().shape({\n      codigo: Yup.string()\n        .required(\"Campo obrigatório\")\n        .length(6, 'Codigo inválido')\n    }),\n    handleSubmit({ codigo }, { props, setFieldError, setSubmitting }) {\n      setSubmitting(true);\n      console.log('Dados: ', {email: props.history.location.state.email, codigo: codigo});\n      Auth.confirmSignUp(props.history.location.state.email, codigo.toString()).then((result) => {\n          setSubmitting(false);\n            Auth.signIn(props.history.location.state.email, props.history.location.state.senha)\n            .then(response => {\n              props.history.push('/dadosuser', {initCadastro: props.history.location.state.email, senha: props.history.location.state.senha ,codigoconfimacao: codigo});\n              console.log(\"Minhas props no codigo de confirmação são\", props.history.location)\n            })\n            .catch(error => {\n              console.log('Erro ', error)\n              const messageDefault = \"Ocorreu um erro inesperado.\";\n            \n              const selectErrorMessage = {\n                NotAuthorizedException: \"E-mail ou senha incorretos.\",\n                UserNotFoundException: \"O usuário não foi encontrado.\",\n                PasswordResetRequiredException:\n                  'A sua senha foi resetada. Crie uma nova em \"esqueci minha senha\".',\n                InvalidPasswordException: \"A senha deve conter ao mínimo 8 dígitos.\"\n              };\n            \n              return selectErrorMessage[error.code] || messageDefault;\n            })\n        })\n        .catch(error => {\n          console.log('Erro confirmando assinatura: ', error);\n          window.alert('Codigo de confirmação invalido');\n          setSubmitting(false);\n        });\n    }\n  })(confirmSignUp));\n\nexport default ConfirmSignupForm;"]},"metadata":{},"sourceType":"module"}