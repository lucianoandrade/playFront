{"ast":null,"code":"var _jsxFileName = \"/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/components/Cadastro/DadosUsuario/index.js\";\nimport React from \"react\";\nimport { API, Auth } from \"aws-amplify\";\nimport config from \"../../../config/constants\";\nimport BrDate from \"../../FormikBrDate/formik_br_date\";\nimport * as Yup from \"yup\";\nimport { withFormik, Form, Field, ErrorMessage } from \"formik\";\nimport { withRouter } from \"react-router-dom\";\nimport * as PropTypes from \"prop-types\";\nimport \"./styles.scss\";\nimport TimelineCadastro from \"../TimelineCadastro\";\nimport MaskedInput from \"react-text-mask\";\nconst estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\nconst Alan = {\n  user: {\n    name: \"Alan\",\n    email: \"d256763@urhen.com\",\n    date_birth: \"1991-10-24\",\n    street: \"Tv Sao Pedro\",\n    street_number: \"7\",\n    street_complement: \"\",\n    neighborhood: \"Pedra de Guaratiba\",\n    city: \"Rio de Janeiro\",\n    state: \"RJ\",\n    country: \"Brasil\",\n    postal_code: \"23026-160\",\n    phone_number: \"1111111111\",\n    cpf: \"123.456.789-09\",\n    nickname: \"Alan Araujo\",\n    profile_image: null\n  }\n};\n\nconst CadastroForm = props => {\n  return React.createElement(React.Fragment, null, React.createElement(TimelineCadastro, {\n    current: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(\"section\", {\n    className: \"telaCompleteCadastro\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"completeCadastro\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(Form, {\n    className: \"dadosPessoais\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"blocoDadosPessoais\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"titleH3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Dados pessoais\"), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"nome\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"nome\",\n    type: \"text\",\n    name: \"nome\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"nome\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Nome completo\")), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"nascimento\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"cpf\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"doisCampos\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"nascimento\",\n    id: \"nascimento\",\n    type: \"date\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"nascimento\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Nascimento\")), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"cpf\",\n    render: ({\n      field\n    }) => {\n      return React.createElement(MaskedInput, Object.assign({\n        mask: [/[0-9]/, /\\d/, /\\d/, \".\", /\\d/, /\\d/, /\\d/, \".\", /\\d/, /\\d/, /\\d/, \"-\", /\\d/, /\\d/]\n      }, field, {\n        id: \"cpf\",\n        type: \"text\",\n        name: \"cpf\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"cpf\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"CPF\"))), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"nickname\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"nickname\",\n    type: \"text\",\n    name: \"nickname\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"nickname\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Nickname\"))), React.createElement(\"div\", {\n    className: \"blocoEnderecoCompleto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"titleH3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Endere\\xE7o completo\"), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"uf\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"cidade\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"doisCampos\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"uf\",\n    name: \"estado\",\n    required: true,\n    component: \"select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"UF\"), estados.map((estado, index) => React.createElement(\"option\", {\n    value: estado,\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, estado))), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"uf\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  })), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"cidade\",\n    type: \"text\",\n    name: \"cidade\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"cidade\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \"Cidade\"))), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"bairro\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"bairro\",\n    type: \"text\",\n    name: \"bairro\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"bairro\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, \"Bairro\")), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"rua\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"rua\",\n    type: \"text\",\n    name: \"rua\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"rua\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, \"Rua\")), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"numero\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"cep\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"doisCampos\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"numero\",\n    type: \"text\",\n    name: \"numero\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"numero\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, \"Numero\")), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"cep\",\n    render: ({\n      field\n    }) => {\n      return React.createElement(MaskedInput, Object.assign({\n        mask: [/[0-9]/, /\\d/, /\\d/, /\\d/, /\\d/, \"-\", /\\d/, /\\d/, /\\d/]\n      }, field, {\n        id: \"cep\",\n        type: \"text\",\n        name: \"cep\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"cep\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, \"CEP\"))), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"complemento\",\n    type: \"text\",\n    name: \"complemento\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"complemento\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, \"Complemento - \", React.createElement(\"i\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, \"opcional\")))), React.createElement(\"button\", {\n    className: \"continuar\",\n    disabled: !props.isValid,\n    style: atv(),\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, \"Continuar\")))));\n\n  function atv() {\n    const x = props.isValid;\n\n    if (x === true) {\n      return {\n        background: \"#000\"\n      };\n    } else {\n      return {\n        background: \"#BBB\"\n      };\n    }\n  }\n};\n\nCadastroForm.propTypes = {\n  values: PropTypes.any,\n  errors: PropTypes.any\n};\nconst FormikForm = withRouter(withFormik({\n  mapPropsToValues({\n    nome,\n    nascimento,\n    cpf,\n    //   tel,\n    nickname,\n    estado,\n    cidade,\n    bairro,\n    rua,\n    numero,\n    cep,\n    complemento //   codigo\n\n  }) {\n    return {\n      nome: nome || \"\",\n      nascimento: nascimento || \"\",\n      cpf: cpf || \"\",\n      // tel: tel || '',\n      nickname: nickname || \"\",\n      estado: estado || \"\",\n      cidade: cidade || \"\",\n      bairro: bairro || \"\",\n      rua: rua || \"\",\n      numero: numero || \"\",\n      cep: cep || \"\",\n      complemento: complemento || \"\" // codigo: codigo || ''\n\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    nome: Yup.string().required(\"Digite seu nome completo!\"),\n    nascimento: BrDate.required(\"Digite sua data de nascimento!\"),\n    cpf: Yup.string().required(\"Digite seu CPF\"),\n    // tel: Yup.string().required('Digite seu telefone!'),\n    nickname: Yup.string().required(\"Digite seu nickname!\"),\n    estado: Yup.string().required(\"Digite seu estado de origem!\"),\n    cidade: Yup.string().required(\"Digite sua cidade!\"),\n    bairro: Yup.string().required(\"Digite seu bairro!\"),\n    rua: Yup.string().required(\"Digite sua rua!\"),\n    numero: Yup.string().required(\"Digite o número da sua casa!\"),\n    cep: Yup.string().length(9).required(\"Campo obrigatório\")\n  }),\n\n  handleSubmit(values, {\n    props\n  }) {\n    Auth.currentAuthenticatedUser().then(response => {\n      console.log(\"VALUES::: \", values);\n      const options = {\n        body: {\n          user: {\n            name: values.nome,\n            email: response.attributes.email,\n            date_birth: values.nascimento,\n            street: values.rua,\n            street_number: values.numero,\n            street_complement: values.complemento,\n            neighborhood: values.bairro,\n            city: values.cidade,\n            state: values.estado,\n            country: \"Brasil\",\n            postal_code: values.cep,\n            phone_number: \"1111111111\",\n            cpf: values.cpf,\n            nickname: values.nickname,\n            profile_image: null\n          }\n        }\n      };\n      API.post(config.APIS.PLAYERSTARS, \"/player\", options).then(response => {\n        console.log(\" DADOS DO USUARIOS VALUES : \", options);\n        props.history.push(\"/console\");\n      }).catch(error => {\n        console.log(\"Esse é o retorno das options\", options);\n        window.alert(\"Erro fazendo post dos dados do usuário.\");\n      });\n    }).catch(error => {\n      console.log(\"erro obtendo usuario atual\", error);\n    });\n  }\n\n})(CadastroForm));\nexport default FormikForm;","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/components/Cadastro/DadosUsuario/index.js"],"names":["React","API","Auth","config","BrDate","Yup","withFormik","Form","Field","ErrorMessage","withRouter","PropTypes","TimelineCadastro","MaskedInput","estados","Alan","user","name","email","date_birth","street","street_number","street_complement","neighborhood","city","state","country","postal_code","phone_number","cpf","nickname","profile_image","CadastroForm","props","field","map","estado","index","isValid","atv","x","background","propTypes","values","any","errors","FormikForm","mapPropsToValues","nome","nascimento","cidade","bairro","rua","numero","cep","complemento","validationSchema","object","shape","string","required","length","handleSubmit","currentAuthenticatedUser","then","response","console","log","options","body","attributes","post","APIS","PLAYERSTARS","history","push","catch","error","window","alert"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { API, Auth } from \"aws-amplify\";\nimport config from \"../../../config/constants\";\nimport BrDate from \"../../FormikBrDate/formik_br_date\";\nimport * as Yup from \"yup\";\nimport { withFormik, Form, Field, ErrorMessage } from \"formik\";\nimport { withRouter } from \"react-router-dom\";\nimport * as PropTypes from \"prop-types\";\n\nimport \"./styles.scss\";\n\nimport TimelineCadastro from \"../TimelineCadastro\";\nimport MaskedInput from \"react-text-mask\";\n\nconst estados = [\n  \"AC\",\n  \"AL\",\n  \"AP\",\n  \"AM\",\n  \"BA\",\n  \"CE\",\n  \"DF\",\n  \"ES\",\n  \"GO\",\n  \"MA\",\n  \"MT\",\n  \"MS\",\n  \"MG\",\n  \"PA\",\n  \"PB\",\n  \"PR\",\n  \"PE\",\n  \"PI\",\n  \"RJ\",\n  \"RN\",\n  \"RS\",\n  \"RO\",\n  \"RR\",\n  \"SC\",\n  \"SP\",\n  \"SE\",\n  \"TO\"\n];\n\nconst Alan = {\n  user: {\n    name: \"Alan\",\n    email: \"d256763@urhen.com\",\n    date_birth: \"1991-10-24\",\n    street: \"Tv Sao Pedro\",\n    street_number: \"7\",\n    street_complement: \"\",\n    neighborhood: \"Pedra de Guaratiba\",\n    city: \"Rio de Janeiro\",\n    state: \"RJ\",\n    country: \"Brasil\",\n    postal_code: \"23026-160\",\n    phone_number: \"1111111111\",\n    cpf: \"123.456.789-09\",\n    nickname: \"Alan Araujo\",\n    profile_image: null\n  }\n};\n\nconst CadastroForm = props => {\n  return (\n    <>\n      <TimelineCadastro current={2} />\n      <section className=\"telaCompleteCadastro\">\n        <div className=\"completeCadastro\">\n          <Form className=\"dadosPessoais\">\n            <div className=\"blocoDadosPessoais\">\n              <h3 className=\"titleH3\">Dados pessoais</h3>\n              <ErrorMessage className=\"error\" component=\"span\" name=\"nome\" />\n              <fieldset>\n                <Field id=\"nome\" type=\"text\" name=\"nome\" required />\n                <label className=\"label\" htmlFor=\"nome\">\n                  Nome completo\n                </label>\n              </fieldset>\n              <ErrorMessage\n                className=\"error\"\n                component=\"span\"\n                name=\"nascimento\"\n              />\n              <ErrorMessage className=\"error\" component=\"span\" name=\"cpf\" />\n              <div className=\"doisCampos\">\n                <fieldset>\n                  <Field\n                    name=\"nascimento\"\n                    id=\"nascimento\"\n                    type=\"date\"\n                    required\n                  />\n                  <label className=\"label\" htmlFor=\"nascimento\">\n                    Nascimento\n                  </label>\n                </fieldset>\n                <fieldset>\n                  <Field\n                    name=\"cpf\"\n                    render={({ field }) => {\n                      return (\n                        <MaskedInput\n                          mask={[\n                            /[0-9]/,\n                            /\\d/,\n                            /\\d/,\n                            \".\",\n                            /\\d/,\n                            /\\d/,\n                            /\\d/,\n                            \".\",\n                            /\\d/,\n                            /\\d/,\n                            /\\d/,\n                            \"-\",\n                            /\\d/,\n                            /\\d/\n                          ]}\n                          {...field}\n                          id=\"cpf\"\n                          type=\"text\"\n                          name=\"cpf\"\n                          required\n                        />\n                      );\n                    }}\n                  />\n                  <label className=\"label\" htmlFor=\"cpf\">\n                    CPF\n                  </label>\n                </fieldset>\n              </div>\n              {/* <ErrorMessage className=\"error\" component=\"span\" name=\"email\"/>\n                            <fieldset >\n                                <Field name=\"tel\" render={({ field }) => {\n                                     return <MaskedInput mask={['(', /[0-9]/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/,  '-', /\\d/, /\\d/, /\\d/, /\\d/]} \n                                     {...field}\n                                    id=\"tel\" \n                                    type=\"text\" \n                                    name=\"tel\"\n                                     />\n                                     }} \n                                     /> \n                                <label className=\"label\" htmlFor=\"tel\">(DDD) Telefone</label>\n                            </fieldset> */}\n              <ErrorMessage\n                className=\"error\"\n                component=\"span\"\n                name=\"nickname\"\n              />\n              <fieldset>\n                <Field id=\"nickname\" type=\"text\" name=\"nickname\" required />\n                <label className=\"label\" htmlFor=\"nickname\">\n                  Nickname\n                </label>\n              </fieldset>\n            </div>\n\n            <div className=\"blocoEnderecoCompleto\">\n              <h3 className=\"titleH3\">Endereço completo</h3>\n              <ErrorMessage className=\"error\" component=\"span\" name=\"uf\" />\n              <ErrorMessage className=\"error\" component=\"span\" name=\"cidade\" />\n              <div className=\"doisCampos\">\n                <fieldset>\n                  <Field id=\"uf\" name=\"estado\" required component=\"select\">\n                    <option value=\"\">UF</option>\n                    {estados.map((estado, index) => (\n                      <option value={estado} key={index}>\n                        {estado}\n                      </option>\n                    ))}\n                  </Field>\n                  <label className=\"label\" htmlFor=\"uf\" />\n                </fieldset>\n                <fieldset>\n                  <Field id=\"cidade\" type=\"text\" name=\"cidade\" required />\n                  <label className=\"label\" htmlFor=\"cidade\">\n                    Cidade\n                  </label>\n                </fieldset>\n              </div>\n\n              <ErrorMessage className=\"error\" component=\"span\" name=\"bairro\" />\n              <fieldset>\n                <Field id=\"bairro\" type=\"text\" name=\"bairro\" required />\n                <label className=\"label\" htmlFor=\"bairro\">\n                  Bairro\n                </label>\n              </fieldset>\n              <ErrorMessage className=\"error\" component=\"span\" name=\"rua\" />\n              <fieldset>\n                <Field id=\"rua\" type=\"text\" name=\"rua\" required />\n                <label className=\"label\" htmlFor=\"rua\">\n                  Rua\n                </label>\n              </fieldset>\n              <ErrorMessage className=\"error\" component=\"span\" name=\"numero\" />\n\n              <ErrorMessage className=\"error\" component=\"span\" name=\"cep\" />\n              <div className=\"doisCampos\">\n                <fieldset>\n                  <Field id=\"numero\" type=\"text\" name=\"numero\" required />\n                  <label className=\"label\" htmlFor=\"numero\">\n                    Numero\n                  </label>\n                </fieldset>\n                <fieldset>\n                  <Field\n                    name=\"cep\"\n                    render={({ field }) => {\n                      return (\n                        <MaskedInput\n                          mask={[\n                            /[0-9]/,\n                            /\\d/,\n                            /\\d/,\n                            /\\d/,\n                            /\\d/,\n                            \"-\",\n                            /\\d/,\n                            /\\d/,\n                            /\\d/\n                          ]}\n                          {...field}\n                          id=\"cep\"\n                          type=\"text\"\n                          name=\"cep\"\n                          required\n                        />\n                      );\n                    }}\n                  />\n                  <label className=\"label\" htmlFor=\"cep\">\n                    CEP\n                  </label>\n                </fieldset>\n              </div>\n\n              <fieldset>\n                <Field id=\"complemento\" type=\"text\" name=\"complemento\" />\n                <label className=\"label\" htmlFor=\"complemento\">\n                  Complemento - <i>opcional</i>\n                </label>\n              </fieldset>\n            </div>\n\n            {/* <div>\n                            <h3 className=\"titleH3\">Código Promocional</h3>\n                            <fieldset>\n                                <Field id=\"codigo\" type=\"text\" name=\"codigo\" />\n                                <label className=\"label\" htmlFor=\"complemento\">Código - <i>opcional</i></label>\n                            </fieldset>\n                        </div> */}\n            <button\n              className=\"continuar\"\n              disabled={!props.isValid}\n              style={atv()}\n              type=\"submit\"\n            >\n              Continuar\n            </button>\n          </Form>\n        </div>\n      </section>\n    </>\n  );\n  function atv() {\n    const x = props.isValid;\n    if (x === true) {\n      return { background: `#000` };\n    } else {\n      return { background: `#BBB` };\n    }\n  }\n};\n\nCadastroForm.propTypes = {\n  values: PropTypes.any,\n  errors: PropTypes.any\n};\n\nconst FormikForm = withRouter(\n  withFormik({\n    mapPropsToValues({\n      nome,\n      nascimento,\n      cpf,\n      //   tel,\n      nickname,\n      estado,\n      cidade,\n      bairro,\n      rua,\n      numero,\n      cep,\n      complemento\n      //   codigo\n    }) {\n      return {\n        nome: nome || \"\",\n        nascimento: nascimento || \"\",\n        cpf: cpf || \"\",\n        // tel: tel || '',\n        nickname: nickname || \"\",\n        estado: estado || \"\",\n        cidade: cidade || \"\",\n        bairro: bairro || \"\",\n        rua: rua || \"\",\n        numero: numero || \"\",\n        cep: cep || \"\",\n        complemento: complemento || \"\"\n        // codigo: codigo || ''\n      };\n    },\n    validationSchema: Yup.object().shape({\n      nome: Yup.string().required(\"Digite seu nome completo!\"),\n      nascimento: BrDate.required(\"Digite sua data de nascimento!\"),\n      cpf: Yup.string().required(\"Digite seu CPF\"),\n      // tel: Yup.string().required('Digite seu telefone!'),\n      nickname: Yup.string().required(\"Digite seu nickname!\"),\n      estado: Yup.string().required(\"Digite seu estado de origem!\"),\n      cidade: Yup.string().required(\"Digite sua cidade!\"),\n      bairro: Yup.string().required(\"Digite seu bairro!\"),\n      rua: Yup.string().required(\"Digite sua rua!\"),\n      numero: Yup.string().required(\"Digite o número da sua casa!\"),\n      cep: Yup.string()\n        .length(9)\n        .required(\"Campo obrigatório\")\n    }),\n    handleSubmit(values, { props }) {\n      Auth.currentAuthenticatedUser()\n        .then(response => {\n          console.log(\"VALUES::: \", values);\n          const options = {\n            body: {\n              user: {\n                name: values.nome,\n                email: response.attributes.email,\n                date_birth: values.nascimento,\n                street: values.rua,\n                street_number: values.numero,\n                street_complement: values.complemento,\n                neighborhood: values.bairro,\n                city: values.cidade,\n                state: values.estado,\n                country: \"Brasil\",\n                postal_code: values.cep,\n                phone_number: \"1111111111\",\n                cpf: values.cpf,\n                nickname: values.nickname,\n                profile_image: null\n              }\n            }\n          };\n\n          API.post(config.APIS.PLAYERSTARS, \"/player\", options)\n            .then(response => {\n              console.log(\" DADOS DO USUARIOS VALUES : \", options);\n              props.history.push(\"/console\");\n            })\n            .catch(error => {\n              console.log(\"Esse é o retorno das options\", options);\n              window.alert(\"Erro fazendo post dos dados do usuário.\");\n            });\n        })\n        .catch(error => {\n          console.log(\"erro obtendo usuario atual\", error);\n        });\n    }\n  })(CadastroForm)\n);\n\nexport default FormikForm;\n"]},"metadata":{},"sourceType":"module"}