{"ast":null,"code":"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Auth } from \"aws-amplify\";\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\nimport FormField from \"../FormField\";\nimport logoPlaystars from \"./../img/logo_final.svg\";\nimport './styles.scss';\nFormField.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string\n};\n\nfunction Signup() {\n  return;\n}\n\nconst SignupForm = withRouter(withFormik({\n  mapPropsToValues({\n    email,\n    senha,\n    senha2\n  }) {\n    return {\n      email: email || '',\n      senha: senha || '',\n      senha2: senha2 || ''\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    email: Yup.string().required(\"Campo obrigatório\").email('Email inválido'),\n    senha: Yup.string().required(\"Campo obrigatório\").min(8, \"Mínimo 8 caracteres\"),\n    senha2: Yup.string().required(\"Campo obrigatório\")\n  }),\n\n  handleSubmit({\n    email,\n    senha,\n    senha2\n  }, {\n    props,\n    setFieldError,\n    setSubmitting\n  }) {\n    console.log(props);\n\n    if (senha !== senha2) {\n      setFieldError(\"senha\", \"As senhas digitadas não estão idênticas.\");\n      setFieldError(\"senha2\", \"As senhas digitadas não estão idênticas.\");\n      return;\n    }\n\n    setSubmitting(true);\n    Auth.signUp(email, senha).then(result => {\n      console.log('Resultado do signup: ', result);\n      console.log('funcionou');\n      props.history.push('/codconfirmacao', {\n        email: email\n      });\n      console.log('Minhas props no inicio do cadastro:', props);\n    }).catch(error => {\n      switch (error.code) {\n        case \"UsernameExistsException\":\n          setFieldError(\"email\", \"Email já está em uso.\");\n          break;\n\n        default:\n          console.log('Erro fazendo signup: ', error);\n          window.alert('Erro fazendo signup');\n          break;\n      }\n\n      setSubmitting(false);\n    });\n  }\n\n})(Signup));\nexport default SignupForm;","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/components/Cadastro/InicioDoCadastro/index.js"],"names":["React","useState","PropTypes","Auth","withRouter","Yup","withFormik","Form","FormField","propTypes","id","string","isRequired","name","label","type","Signup","SignupForm","mapPropsToValues","email","senha","senha2","validationSchema","object","shape","required","min","handleSubmit","props","setFieldError","setSubmitting","console","log","signUp","then","result","history","push","catch","error","code","window","alert"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,QAAjC;AAEA,OAAOC,SAAP,MAAsB,cAAtB;;AAGA,OAAO,eAAP;AAEAA,SAAS,CAACC,SAAV,GAAsB;AAClBC,EAAAA,EAAE,EAAER,SAAS,CAACS,MAAV,CAAiBC,UADH;AAElBC,EAAAA,IAAI,EAAEX,SAAS,CAACS,MAAV,CAAiBC,UAFL;AAGlBE,EAAAA,KAAK,EAAEZ,SAAS,CAACS,MAAV,CAAiBC,UAHN;AAIlBG,EAAAA,IAAI,EAAEb,SAAS,CAACS;AAJE,CAAtB;;AAOC,SAASK,MAAT,GAAiB;AAChB;AACA;;AAGF,MAAMC,UAAU,GAAGb,UAAU,CAACE,UAAU,CAAC;AACrCY,EAAAA,gBAAgB,CAAC;AACEC,IAAAA,KADF;AAEEC,IAAAA,KAFF;AAGEC,IAAAA;AAHF,GAAD,EAII;AAClB,WAAO;AACLF,MAAAA,KAAK,EAAEA,KAAK,IAAI,EADX;AAELC,MAAAA,KAAK,EAAEA,KAAK,IAAI,EAFX;AAGLC,MAAAA,MAAM,EAAEA,MAAM,IAAI;AAHb,KAAP;AAKD,GAXoC;;AAYrCC,EAAAA,gBAAgB,EAAEjB,GAAG,CAACkB,MAAJ,GAAaC,KAAb,CAAmB;AACnCL,IAAAA,KAAK,EAAEd,GAAG,CAACM,MAAJ,GACJc,QADI,CACK,mBADL,EAEJN,KAFI,CAEE,gBAFF,CAD4B;AAInCC,IAAAA,KAAK,EAAEf,GAAG,CAACM,MAAJ,GACJc,QADI,CACK,mBADL,EAEJC,GAFI,CAEA,CAFA,EAEG,qBAFH,CAJ4B;AAOnCL,IAAAA,MAAM,EAAEhB,GAAG,CAACM,MAAJ,GACLc,QADK,CACI,mBADJ;AAP2B,GAAnB,CAZmB;;AAsBrCE,EAAAA,YAAY,CAAC;AAAER,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB,GAAD,EAA2B;AAAEO,IAAAA,KAAF;AAASC,IAAAA,aAAT;AAAwBC,IAAAA;AAAxB,GAA3B,EAAoE;AAC9EC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;;AACA,QAAGR,KAAK,KAAKC,MAAb,EAAqB;AACnBQ,MAAAA,aAAa,CAAC,OAAD,EAAU,0CAAV,CAAb;AACAA,MAAAA,aAAa,CAAC,QAAD,EAAW,0CAAX,CAAb;AACA;AACD;;AACDC,IAAAA,aAAa,CAAC,IAAD,CAAb;AAEA3B,IAAAA,IAAI,CAAC8B,MAAL,CAAYd,KAAZ,EAAmBC,KAAnB,EACGc,IADH,CACSC,MAAD,IAAY;AAChBJ,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCG,MAArC;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAJ,MAAAA,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAmB,iBAAnB,EAAsC;AAAElB,QAAAA,KAAK,EAAEA;AAAT,OAAtC;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAkDJ,KAAlD;AACD,KANH,EAOGU,KAPH,CAOSC,KAAK,IAAI;AACd,cAAOA,KAAK,CAACC,IAAb;AACE,aAAK,yBAAL;AACEX,UAAAA,aAAa,CAAC,OAAD,EAAU,uBAAV,CAAb;AACA;;AACF;AACEE,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCO,KAArC;AACAE,UAAAA,MAAM,CAACC,KAAP,CAAa,qBAAb;AACA;AAPJ;;AASAZ,MAAAA,aAAa,CAAC,KAAD,CAAb;AAED,KAnBH;AAoBD;;AAnDoC,CAAD,CAAV,CAoDzBd,MApDyB,CAAD,CAA7B;AAsDE,eAAeC,UAAf","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport { Auth } from \"aws-amplify\";\nimport { withRouter } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\n\nimport FormField from \"../FormField\";\n\nimport logoPlaystars from './../img/logo_final.svg';\nimport './styles.scss';\n\nFormField.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    type: PropTypes.string,\n  };\n\n function Signup(){\n  return \n }\n \n\nconst SignupForm = withRouter(withFormik({\n    mapPropsToValues({\n                       email,\n                       senha,\n                       senha2\n                     }) {\n      return {\n        email: email || '',\n        senha: senha || '',\n        senha2: senha2 || ''\n      }\n    },\n    validationSchema: Yup.object().shape({\n      email: Yup.string()\n        .required(\"Campo obrigatório\")\n        .email('Email inválido'),\n      senha: Yup.string()\n        .required(\"Campo obrigatório\")\n        .min(8, \"Mínimo 8 caracteres\"),\n      senha2: Yup.string()\n        .required(\"Campo obrigatório\")\n    }),\n    handleSubmit({ email, senha, senha2 }, { props, setFieldError, setSubmitting }) {\n      console.log(props);\n      if(senha !== senha2) {\n        setFieldError(\"senha\", \"As senhas digitadas não estão idênticas.\");\n        setFieldError(\"senha2\", \"As senhas digitadas não estão idênticas.\");\n        return;\n      } \n      setSubmitting(true);\n  \n      Auth.signUp(email, senha)\n        .then((result) => {\n          console.log('Resultado do signup: ', result)\n          console.log('funcionou')\n          props.history.push('/codconfirmacao', { email: email });\n          console.log('Minhas props no inicio do cadastro:',props)\n        })\n        .catch(error => {\n          switch(error.code) {\n            case \"UsernameExistsException\":\n              setFieldError(\"email\", \"Email já está em uso.\");\n              break;\n            default:\n              console.log('Erro fazendo signup: ', error);\n              window.alert('Erro fazendo signup');\n              break;\n          }\n          setSubmitting(false);\n  \n        });\n    }\n  })(Signup));\n  \n  export default SignupForm;"]},"metadata":{},"sourceType":"module"}