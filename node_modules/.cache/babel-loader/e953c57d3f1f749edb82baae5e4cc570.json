{"ast":null,"code":"var _jsxFileName = \"/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/components/Cadastro/DadosUsuario/index.js\";\nimport React from 'react';\nimport { API, Auth } from \"aws-amplify\";\nimport config from \"../../../config/constants\";\nimport BrDate from \"../../FormikBrDate/formik_br_date\";\nimport * as Yup from 'yup';\nimport { withFormik, Form, Field, ErrorMessage } from 'formik';\nimport { withRouter } from \"react-router-dom\";\nimport * as PropTypes from \"prop-types\";\nimport './styles.scss';\nimport TimelineCadastro from '../TimelineCadastro';\nimport MaskedInput from 'react-text-mask';\nconst estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\", \"SP\", \"SE\", \"TO\"];\n\nconst CadastroForm = props => {\n  console.log(props);\n  return React.createElement(React.Fragment, null, React.createElement(TimelineCadastro, {\n    current: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(\"section\", {\n    className: \"telaCompleteCadastro\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"completeCadastro\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(Form, {\n    className: \"dadosPessoais\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"blocoDadosPessoais\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"titleH3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"Dados pessoais\"), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"nome\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"nome\",\n    type: \"text\",\n    name: \"nome\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"nome\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Nome completo\")), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"nascimento\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"cpf\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"doisCampos\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"nascimento\",\n    render: ({\n      field\n    }) => {\n      return React.createElement(MaskedInput, Object.assign({\n        mask: [/[0-9]/, /\\d/, '/', /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/]\n      }, field, {\n        id: \"nascimento\",\n        type: \"text\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"nascimento\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Nascimento\")), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"cpf\",\n    render: ({\n      field\n    }) => {\n      return React.createElement(MaskedInput, Object.assign({\n        mask: [/[0-9]/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\n      }, field, {\n        id: \"cpf\",\n        type: \"text\",\n        name: \"cpf\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"cpf\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"CPF\"))), React.createElement(\"fieldset\", {\n    style: {\n      display: \"none\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"}} />\", React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"tel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"(DDD) Telefone\")), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"nickname\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"nickname\",\n    type: \"text\",\n    name: \"nickname\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"nickname\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Nickname\"))), React.createElement(\"div\", {\n    className: \"blocoEnderecoCompleto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"titleH3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Endere\\xE7o completo\"), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"uf\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"cidade\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"doisCampos\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"uf\",\n    name: \"estado\",\n    required: true,\n    component: \"select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"UF\"), estados.map((estado, index) => React.createElement(\"option\", {\n    value: estado,\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, estado))), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"uf\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"cidade\",\n    type: \"text\",\n    name: \"cidade\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"cidade\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Cidade\"))), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"bairro\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"bairro\",\n    type: \"text\",\n    name: \"bairro\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"bairro\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Bairro\")), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"rua\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"rua\",\n    type: \"text\",\n    name: \"rua\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"rua\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Rua\")), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"numero\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"cep\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"doisCampos\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"numero\",\n    type: \"text\",\n    name: \"numero\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"numero\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Numero\")), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"cep\",\n    render: ({\n      field\n    }) => {\n      return React.createElement(MaskedInput, Object.assign({\n        mask: [/[0-9]/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/]\n      }, field, {\n        id: \"cep\",\n        type: \"text\",\n        name: \"cep\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"cep\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"CEP\"))), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"complemento\",\n    type: \"text\",\n    name: \"complemento\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"complemento\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"Complemento - \", React.createElement(\"i\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"opcional\")))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"titleH3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"C\\xF3digo Promocional\"), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"codigo\",\n    type: \"text\",\n    name: \"codigo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"complemento\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"C\\xF3digo - \", React.createElement(\"i\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"opcional\")))), React.createElement(\"button\", {\n    className: \"continuar\",\n    disabled: !props.isValid,\n    style: atv(),\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Continuar\")))));\n\n  function atv() {\n    const x = props.isValid;\n\n    if (x === true) {\n      return {\n        background: \"#000\"\n      };\n    } else {\n      return {\n        background: \"#BBB\"\n      };\n    }\n  }\n\n  ;\n};\n\nCadastroForm.propTypes = {\n  values: PropTypes.any,\n  errors: PropTypes.any\n};\nconst FormikForm = withRouter(withFormik({\n  mapPropsToValues({\n    nome,\n    nascimento,\n    cpf,\n    tel,\n    nickname,\n    estado,\n    cidade,\n    bairro,\n    rua,\n    numero,\n    cep,\n    complemento,\n    codigo\n  }) {\n    return {\n      nome: nome || '',\n      nascimento: nascimento || '',\n      cpf: cpf || '',\n      tel: tel || '',\n      nickname: nickname || '',\n      estado: estado || '',\n      cidade: cidade || '',\n      bairro: bairro || '',\n      rua: rua || '',\n      numero: numero || '',\n      cep: cep || '',\n      complemento: complemento || '',\n      codigo: codigo || ''\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    nome: Yup.string().required('Digite seu nome completo!'),\n    nascimento: BrDate.required('Digite sua data de nascimento!'),\n    cpf: Yup.string().required('Digite seu CPF'),\n    tel: Yup.string().required('Digite seu telefone!'),\n    nickname: Yup.string().required('Digite seu nickname!'),\n    estado: Yup.string().required('Digite seu estado de origem!'),\n    cidade: Yup.string().required('Digite sua cidade!'),\n    bairro: Yup.string().required('Digite seu bairro!'),\n    rua: Yup.string().required('Digite sua rua!'),\n    numero: Yup.string().required('Digite o número da sua casa!'),\n    cep: Yup.string().length(9).required(\"Campo obrigatório\")\n  }),\n\n  handleSubmit(values, {\n    props\n  }) {\n    Auth.currentAuthenticatedUser().then(response => {\n      console.log(\"VALUES::: \", values);\n      const options = {\n        body: {\n          user: {\n            name: values.nome,\n            email: response.attributes.email,\n            date_birth: values.nascimento,\n            street: values.rua,\n            street_number: values.numero,\n            street_complement: values.complemento,\n            neighborhood: values.bairro,\n            city: values.cidade,\n            state: values.estado,\n            country: \"Brasil\",\n            postal_code: values.cep,\n            phone_number: values.tel,\n            cpf: values.cpf,\n            nickname: values.nickname,\n            profile_image: null\n          }\n        }\n      };\n      API.post(config.APIS.PLAYERSTARS, '/player', options).then(response => {\n        console.log(\" DADOS DO USUARIOS VALUES : \", options);\n        props.history.push('/console');\n      }).catch(error => {\n        console.log('Esse é o retorno das options', options);\n        window.alert('Erro fazendo post dos dados do usuário.');\n      });\n    }).catch(error => {\n      console.log(\"erro obtendo usuario atual\", error);\n    });\n  }\n\n})(CadastroForm));\nexport default FormikForm;","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/components/Cadastro/DadosUsuario/index.js"],"names":["React","API","Auth","config","BrDate","Yup","withFormik","Form","Field","ErrorMessage","withRouter","PropTypes","TimelineCadastro","MaskedInput","estados","CadastroForm","props","console","log","field","display","map","estado","index","isValid","atv","x","background","propTypes","values","any","errors","FormikForm","mapPropsToValues","nome","nascimento","cpf","tel","nickname","cidade","bairro","rua","numero","cep","complemento","codigo","validationSchema","object","shape","string","required","length","handleSubmit","currentAuthenticatedUser","then","response","options","body","user","name","email","attributes","date_birth","street","street_number","street_complement","neighborhood","city","state","country","postal_code","phone_number","profile_image","post","APIS","PLAYERSTARS","history","push","catch","error","window","alert"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { API, Auth } from \"aws-amplify\"\nimport config from \"../../../config/constants\"\nimport BrDate from \"../../FormikBrDate/formik_br_date\"\nimport * as Yup from 'yup';\nimport { withFormik, Form, Field, ErrorMessage } from 'formik';\nimport {withRouter} from \"react-router-dom\"\nimport * as PropTypes from \"prop-types\"\n\nimport './styles.scss';\n\nimport TimelineCadastro from '../TimelineCadastro';\nimport MaskedInput from 'react-text-mask'\n\nconst estados = [\"AC\", \"AL\", \"AP\", \"AM\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \"MT\", \"MS\",\n  \"MG\", \"PA\", \"PB\", \"PR\", \"PE\", \"PI\", \"RJ\", \"RN\", \"RS\", \"RO\", \"RR\", \"SC\",\n  \"SP\", \"SE\", \"TO\"];\n\n\nconst CadastroForm = (props) => {\n    console.log(props)\n    return(\n    <>\n        <TimelineCadastro current={2} />\n        <section className=\"telaCompleteCadastro\">\n            <div className=\"completeCadastro\">\n                    <Form className=\"dadosPessoais\">\n                        <div className=\"blocoDadosPessoais\">\n                            <h3 className=\"titleH3\">Dados pessoais</h3>\n                            <ErrorMessage className=\"error\" component=\"span\" name=\"nome\"/>\n                            <fieldset>\n                                <Field id=\"nome\" type=\"text\" name=\"nome\" required/>\n                                <label className=\"label\" htmlFor=\"nome\">Nome completo</label>\n                            </fieldset>\n                            <ErrorMessage className=\"error\" component=\"span\" name=\"nascimento\"/>\n                            <ErrorMessage className=\"error\" component=\"span\" name=\"cpf\"/>\n                            <div className=\"doisCampos\">\n                                <fieldset>\n                                    <Field name=\"nascimento\" render={({ field }) => {\n                                        return <MaskedInput mask={[/[0-9]/, /\\d/, '/', /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/]}  \n                                        {...field}\n                                        id=\"nascimento\" \n                                        type=\"text\" \n                                        required />\n                                        }} />                  \n                                    <label className=\"label\" htmlFor=\"nascimento\">Nascimento</label> \n                                </fieldset>\n                                <fieldset> \n                                    <Field name=\"cpf\" render={({ field }) => {\n                                        return <MaskedInput mask={[/[0-9]/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/,'.', /\\d/, /\\d/, /\\d/,'-', /\\d/, /\\d/]}\n                                        {...field}\n                                        id=\"cpf\" \n                                        type=\"text\" \n                                        name=\"cpf\" \n                                        required />\n                                        }} /> \n                                    <label className=\"label\" htmlFor=\"cpf\">CPF</label>\n                                </fieldset>\n                            </div>\n                            {/* <ErrorMessage className=\"error\" component=\"span\" name=\"email\"/> */}\n                            <fieldset style={{display: \"none\"}}>\n                                {/* <Field name=\"tel\" render={({ field }) => {\n                                     return <MaskedInput mask={['(', /[0-9]/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, /\\d/, /\\d/,  '-', /\\d/, /\\d/, /\\d/, /\\d/]} \n                                     {...field}\n                                    id=\"tel\" \n                                    type=\"text\" \n                                    name=\"tel\"\n                                     /> */}\n                                     }} /> \n                                <label className=\"label\" htmlFor=\"tel\">(DDD) Telefone</label>\n                            </fieldset>\n                            <ErrorMessage className=\"error\" component=\"span\" name=\"nickname\"/>\n                            <fieldset>   \n                                <Field id=\"nickname\" type=\"text\" name=\"nickname\" required/>\n                                <label className=\"label\" htmlFor=\"nickname\">Nickname</label>\n                            </fieldset>\n                        </div>\n\n                        <div className=\"blocoEnderecoCompleto\">\n                            <h3 className=\"titleH3\">Endereço completo</h3> \n                            <ErrorMessage className=\"error\" component=\"span\" name=\"uf\"/>\n                            <ErrorMessage className=\"error\" component=\"span\" name=\"cidade\"/>\n                            <div className=\"doisCampos\">\n                                <fieldset> \n                                    <Field id=\"uf\" name=\"estado\" required component=\"select\">\n                                    <option value=\"\">UF</option>\n                                        { estados.map((estado, index) => <option value={ estado } key={ index }>{ estado }</option>) }\n                                    </Field>\n                                    <label className=\"label\" htmlFor=\"uf\"/>\n                                </fieldset>\n                                <fieldset>\n                                    <Field id=\"cidade\" type=\"text\" name=\"cidade\" required/>\n                                    <label className=\"label\" htmlFor=\"cidade\">Cidade</label>\n                                </fieldset>\n                            </div>\n\n                            <ErrorMessage className=\"error\" component=\"span\" name=\"bairro\"/>\n                            <fieldset> \n                                <Field id=\"bairro\" type=\"text\" name=\"bairro\" required/>\n                                <label className=\"label\" htmlFor=\"bairro\">Bairro</label>\n                            </fieldset>\n                            <ErrorMessage className=\"error\" component=\"span\" name=\"rua\"/>\n                            <fieldset>\n                                <Field id=\"rua\" type=\"text\" name=\"rua\" required/>\n                                <label className=\"label\" htmlFor=\"rua\">Rua</label>\n                            </fieldset>\n                            <ErrorMessage className=\"error\" component=\"span\" name=\"numero\"/>\n\n                            <ErrorMessage className=\"error\" component=\"span\" name=\"cep\"/>\n                            <div className=\"doisCampos\">\n                                <fieldset>\n                                    <Field id=\"numero\" type=\"text\" name=\"numero\" required/>\n                                    <label className=\"label\" htmlFor=\"numero\">Numero</label>\n                                </fieldset>\n                                <fieldset>\n                                    <Field name=\"cep\" render={({ field }) => {\n                                        return <MaskedInput mask={[/[0-9]/, /\\d/, /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/]} \n                                        {...field}\n                                        id=\"cep\" \n                                        type=\"text\" \n                                        name=\"cep\" \n                                        required />\n                                        }} />\n                                    <label className=\"label\" htmlFor=\"cep\">CEP</label>\n                                </fieldset>\n                            </div>\n\n                            <fieldset>\n                                <Field id=\"complemento\" type=\"text\" name=\"complemento\" />\n                                <label className=\"label\" htmlFor=\"complemento\">Complemento - <i>opcional</i></label>\n                            </fieldset>\n                        </div>\n\n                        <div>\n                            <h3 className=\"titleH3\">Código Promocional</h3>\n                            <fieldset>\n                                <Field id=\"codigo\" type=\"text\" name=\"codigo\" />\n                                <label className=\"label\" htmlFor=\"complemento\">Código - <i>opcional</i></label>\n                            </fieldset>\n                        </div>\n                        <button className=\"continuar\" disabled={!props.isValid} style={atv()} type=\"submit\">Continuar</button>\n                    </Form>\n            </div>\n        </section>\n    </>\n    )\n    function atv() { const x = props.isValid; \n        if (x === true) {return({background: `#000`})} else {return({background: `#BBB`}) }\n      };\n}\n    \nCadastroForm.propTypes = {\n    values: PropTypes.any,\n    errors: PropTypes.any\n}\n\nconst FormikForm = withRouter(withFormik({\n    mapPropsToValues({\n      nome,\n      nascimento,\n      cpf,\n      tel,\n      nickname,\n      estado,\n      cidade,\n      bairro,\n      rua,\n      numero,\n      cep,\n      complemento,\n      codigo\n    }) {\n      return {\n        nome: nome || '',\n        nascimento: nascimento || '',\n        cpf: cpf || '',\n        tel: tel || '',\n        nickname: nickname || '',\n        estado: estado || '',\n        cidade: cidade || '',\n        bairro: bairro || '',\n        rua: rua || '',\n        numero: numero || '',\n        cep: cep || '',      \n        complemento: complemento || '',\n        codigo: codigo || ''\n      }\n    },\n    validationSchema: Yup.object().shape({\n            nome: Yup.string().required('Digite seu nome completo!'),\n            nascimento: BrDate.required('Digite sua data de nascimento!'),\n            cpf: Yup.string().required('Digite seu CPF'),\n            tel: Yup.string().required('Digite seu telefone!'),\n            nickname: Yup.string().required('Digite seu nickname!'),\n            estado: Yup.string().required('Digite seu estado de origem!'),\n            cidade: Yup.string().required('Digite sua cidade!'),\n            bairro: Yup.string().required('Digite seu bairro!'),\n            rua: Yup.string().required('Digite sua rua!'),\n            numero: Yup.string().required('Digite o número da sua casa!'),\n            cep: Yup.string().length(9).required(\"Campo obrigatório\")\n    }),\n    handleSubmit(values, { props }) {\n      Auth.currentAuthenticatedUser()\n          .then(response => {\n            console.log(\"VALUES::: \", values)\n                const options = {\n                    body: {\n                        user: {\n                            name: values.nome,\n                            email: response.attributes.email,\n                            date_birth:values.nascimento,\n                            street:values.rua,\n                            street_number:values.numero,\n                            street_complement:values.complemento,\n                            neighborhood:values.bairro,\n                            city:values.cidade,\n                            state:values.estado,\n                            country: \"Brasil\",\n                            postal_code:values.cep,\n                            phone_number:values.tel,\n                            cpf:values.cpf,\n                            nickname:values.nickname,\n                            profile_image: null\n                        },\n                    }\n                }\n\n            API.post(config.APIS.PLAYERSTARS, '/player', options)\n                    .then(response => {\n                        console.log(\" DADOS DO USUARIOS VALUES : \", options)\n                        props.history.push('/console')\n                    })\n                    .catch(error => {\n                        console.log('Esse é o retorno das options', options);\n                        window.alert('Erro fazendo post dos dados do usuário.');\n                    })\n          })\n          .catch(error => {\n              console.log(\"erro obtendo usuario atual\" , error)\n          })\n    }\n  })(CadastroForm));\n  \n  export default FormikForm;\n\n"]},"metadata":{},"sourceType":"module"}