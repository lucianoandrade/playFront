{"ast":null,"code":"var _jsxFileName = \"/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/components/Cadastro/DadosUsuario/index.js\";\nimport React from 'react';\nimport { API, Auth } from \"aws-amplify\";\nimport config from \"../../../config/constants\";\nimport BrDate from \"../../FormikBrDate/formik_br_date\";\nimport CPF from \"cpf-check\";\nimport * as Yup from 'yup';\nimport { withFormik, Form, Field, ErrorMessage } from 'formik';\nimport { withRouter } from \"react-router-dom\";\nimport * as PropTypes from \"prop-types\";\nimport './styles.scss';\nimport TimelineCadastro from '../TimelineCadastro';\nimport MaskedInput from 'react-text-mask';\n\nconst onlyNumbers = _text => {\n  const replaced = _text ? _text.replace(/[^\\d]/g, \"\") : \"\";\n  return replaced;\n};\n\nfunction test_cpf(message) {\n  if (message === void 0) {\n    message = \"CPF inválido\";\n  }\n\n  return this.test({\n    message: message,\n    name: \"cpf\",\n    exclusive: true,\n    test: function test(value) {\n      const replaced = onlyNumbers(value);\n      return CPF.validate(replaced);\n    }\n  });\n}\n\nconsole.log(Yup);\nYup.addMethod(Yup.string, \"cpf\", test_cpf);\nconsole.log(Yup);\n\nconst CadastroForm = props => {\n  return React.createElement(React.Fragment, null, React.createElement(TimelineCadastro, {\n    current: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(\"section\", {\n    className: \"telaCompleteCadastro\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"completeCadastro\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Form, {\n    className: \"dadosPessoais\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"blocoDadosPessoais\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"titleH3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Dados pessoais\"), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"nome\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"nome\",\n    type: \"text\",\n    name: \"nome\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"nome\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Nome completo\")), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"nascimento\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"cpf\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"doisCampos\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"nascimento\",\n    id: \"nascimento\",\n    type: \"date\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"nascimento\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Nascimento\")), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"cpf\",\n    render: ({\n      field\n    }) => {\n      return React.createElement(MaskedInput, Object.assign({\n        mask: [/[0-9]/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/]\n      }, field, {\n        id: \"cpf\",\n        type: \"text\",\n        name: \"cpf\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"cpf\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"CPF\"))), React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"nickname\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"nickname\",\n    type: \"text\",\n    name: \"nickname\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"nickname\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Nickname\"))), React.createElement(\"button\", {\n    className: \"continuar\",\n    disabled: !props.isValid,\n    style: atv(),\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Continuar\")))));\n\n  function atv() {\n    const x = props.isValid;\n\n    if (x === true) {\n      return {\n        background: \"#000\"\n      };\n    } else {\n      return {\n        background: \"#BBB\"\n      };\n    }\n  }\n\n  ;\n};\n\nCadastroForm.propTypes = {\n  values: PropTypes.any,\n  errors: PropTypes.any\n};\nconst FormikForm = withRouter(withFormik({\n  mapPropsToValues({\n    nome,\n    nascimento,\n    cpf,\n    nickname\n  }) {\n    return {\n      nome: nome || '',\n      nascimento: nascimento || '',\n      cpf: cpf || '',\n      nickname: nickname || ''\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    nome: Yup.string().required('Digite seu nome completo!'),\n    nascimento: BrDate.required('Digite sua data de nascimento!'),\n    cpf: Yup.string().cpf(\"CPF inválido\").required(\"Campo obrigatório\"),\n    nickname: Yup.string().required('Digite seu nickname!')\n  }),\n\n  handleSubmit(values, {\n    props\n  }) {\n    Auth.currentAuthenticatedUser().then(response => {\n      console.log(\"VALUES::: \", values);\n      const options = {\n        body: {\n          user: {\n            name: values.nome,\n            email: response.attributes.email,\n            date_birth: values.nascimento,\n            street: \"-\",\n            street_number: \"-\",\n            street_complement: \"-\",\n            neighborhood: \"-\",\n            city: \"-\",\n            state: \"-\",\n            country: \"Brasil\",\n            postal_code: \"-\",\n            phone_number: \"1111111111\",\n            cpf: values.cpf,\n            nickname: values.nickname,\n            profile_image: null\n          }\n        }\n      };\n      API.post(config.APIS.PLAYERSTARS, '/player', options).then(response => {\n        console.log(\" DADOS DO USUARIOS VALUES : \", options);\n        props.history.push('/console');\n      }).catch(error => {\n        console.log('Esse é o retorno das options', options);\n        window.alert('Erro fazendo post dos dados do usuário.');\n      });\n    }).catch(error => {\n      console.log(\"erro obtendo usuario atual\", error);\n    });\n  }\n\n})(CadastroForm));\nexport default FormikForm;","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/components/Cadastro/DadosUsuario/index.js"],"names":["React","API","Auth","config","BrDate","CPF","Yup","withFormik","Form","Field","ErrorMessage","withRouter","PropTypes","TimelineCadastro","MaskedInput","onlyNumbers","_text","replaced","replace","test_cpf","message","test","name","exclusive","value","validate","console","log","addMethod","string","CadastroForm","props","field","isValid","atv","x","background","propTypes","values","any","errors","FormikForm","mapPropsToValues","nome","nascimento","cpf","nickname","validationSchema","object","shape","required","handleSubmit","currentAuthenticatedUser","then","response","options","body","user","email","attributes","date_birth","street","street_number","street_complement","neighborhood","city","state","country","postal_code","phone_number","profile_image","post","APIS","PLAYERSTARS","history","push","catch","error","window","alert"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { API, Auth } from \"aws-amplify\";\nimport config from \"../../../config/constants\";\nimport BrDate from \"../../FormikBrDate/formik_br_date\";\nimport CPF from \"cpf-check\";\nimport * as Yup from 'yup';\nimport { withFormik, Form, Field, ErrorMessage } from 'formik';\nimport {withRouter} from \"react-router-dom\";\nimport * as PropTypes from \"prop-types\";\n\nimport './styles.scss';\n\nimport TimelineCadastro from '../TimelineCadastro';\nimport MaskedInput from 'react-text-mask';\n\nconst onlyNumbers = (_text) => {\n    const replaced = _text ? _text.replace(/[^\\d]/g, \"\") : \"\"\n    return replaced\n}\n  \nfunction test_cpf(message) {\n    if (message === void 0) {\n      message = \"CPF inválido\";\n    }\n  \n    return this.test({\n      message: message,\n      name: \"cpf\",\n      exclusive: true,\n      test: function test(value) {\n        const replaced = onlyNumbers(value);\n        return CPF.validate(replaced);\n      }\n    });\n  }\n  \nconsole.log(Yup);\nYup.addMethod(Yup.string, \"cpf\", test_cpf);\nconsole.log(Yup);\n\n\nconst CadastroForm = (props) =>  {\n    \n    return(\n    <>\n        <TimelineCadastro current={2} />\n        <section className=\"telaCompleteCadastro\">\n            <div className=\"completeCadastro\">\n                    <Form className=\"dadosPessoais\">\n                        <div className=\"blocoDadosPessoais\">\n                            <h3 className=\"titleH3\">Dados pessoais</h3>\n                            <ErrorMessage className=\"error\" component=\"span\" name=\"nome\"/>\n                            <fieldset>\n                                <Field id=\"nome\" type=\"text\" name=\"nome\" required/>\n                                <label className=\"label\" htmlFor=\"nome\">Nome completo</label>\n                            </fieldset>\n                            <ErrorMessage className=\"error\" component=\"span\" name=\"nascimento\"/>\n                            <ErrorMessage className=\"error\" component=\"span\" name=\"cpf\"/>\n                            <div className=\"doisCampos\">\n                                <fieldset>\n                                    <Field \n                                        name=\"nascimento\"\n                                        id=\"nascimento\" \n                                        type=\"date\"\n                                        required \n                                    />      \n                                    <label className=\"label\" htmlFor=\"nascimento\">Nascimento</label> \n                                </fieldset>\n                                <fieldset> \n                                    <Field name=\"cpf\" render={({ field }) => {\n                                        return <MaskedInput mask={[/[0-9]/, /\\d/, /\\d/, '.', /\\d/, /\\d/, /\\d/,'.', /\\d/, /\\d/, /\\d/,'-', /\\d/, /\\d/]}\n                                        {...field}\n                                        id=\"cpf\" \n                                        type=\"text\" \n                                        name=\"cpf\" \n                                        required />\n                                        }} /> \n                                    <label className=\"label\" htmlFor=\"cpf\">CPF</label>\n                                </fieldset>\n                            </div>\n                            <ErrorMessage className=\"error\" component=\"span\" name=\"nickname\"/>\n                            <fieldset>   \n                                <Field id=\"nickname\" type=\"text\" name=\"nickname\" required/>\n                                <label className=\"label\" htmlFor=\"nickname\">Nickname</label>\n                            </fieldset>\n                        </div>\n                        <button className=\"continuar\" disabled={!props.isValid} style={atv()} type=\"submit\">Continuar</button>\n                    </Form>\n            </div>\n        </section>\n    </>\n    )\n    function atv() { const x = props.isValid; \n        if (x === true) {return({background: `#000`})} else {return({background: `#BBB`}) }\n    };\n}\n    \nCadastroForm.propTypes = {\n    values: PropTypes.any,\n    errors: PropTypes.any\n}\n\nconst FormikForm = withRouter(withFormik({\n    mapPropsToValues({\n      nome,\n      nascimento,\n      cpf,\n      nickname\n    }) {\n      return {\n        nome: nome || '',\n        nascimento: nascimento || '',\n        cpf: cpf || '',\n        nickname: nickname || ''\n      }\n    },\n    validationSchema: Yup.object().shape({\n            nome: Yup.string().required('Digite seu nome completo!'),\n            nascimento: BrDate.required('Digite sua data de nascimento!'),\n            cpf: Yup.string().cpf(\"CPF inválido\").required(\"Campo obrigatório\"),\n            nickname: Yup.string().required('Digite seu nickname!')\n    }),\n    handleSubmit(values, { props }) {\n      Auth.currentAuthenticatedUser()\n          .then(response => {\n            console.log(\"VALUES::: \", values)\n                const options = {\n                    body: {\n                        user: {\n                            name: values.nome,\n                            email: response.attributes.email,\n                            date_birth:values.nascimento,\n                            street:\"-\",\n                            street_number:\"-\",\n                            street_complement:\"-\",\n                            neighborhood:\"-\",\n                            city:\"-\",\n                            state:\"-\",\n                            country: \"Brasil\",\n                            postal_code:\"-\",\n                            phone_number: \"1111111111\",\n                            cpf:values.cpf,\n                            nickname:values.nickname,\n                            profile_image: null\n                        },\n                    }\n                }\n\n            API.post(config.APIS.PLAYERSTARS, '/player', options)\n                    .then(response => {\n                        console.log(\" DADOS DO USUARIOS VALUES : \", options)\n                        props.history.push('/console')\n                    })\n                    .catch(error => {\n                        console.log('Esse é o retorno das options', options);\n                        window.alert('Erro fazendo post dos dados do usuário.');\n                    })\n          })\n          .catch(error => {\n              console.log(\"erro obtendo usuario atual\" , error)\n          })\n    }\n  })(CadastroForm));\n  \n  export default FormikForm;"]},"metadata":{},"sourceType":"module"}