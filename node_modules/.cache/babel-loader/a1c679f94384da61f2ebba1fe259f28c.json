{"ast":null,"code":"var _jsxFileName = \"/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/pages/CodConfirmacao/index.js\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { withAlert } from 'react-alert';\nimport { Auth } from \"aws-amplify\";\nimport { Form, withFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport PageContainer from \"../../components/features/PageContainer\";\nimport Email from \"../../assets/icons/email.png\";\nimport FormField from \"../../components/elements/FormField\";\nimport \"./styles.scss\";\n\nconst confirmSignUp = props => {\n  const resendCode = ev => {\n    ev.preventDefault();\n    Auth.forgotPassword(props.history.location.state.email).then(data => {\n      props.alert.success('Codigo enviado');\n    }).catch(err => {\n      console.log('ERROR', err);\n      const defaultMessage = \"Erro ao reenviar o código, tente novamento mais tarde\";\n      const selectMessageError = {\n        InvalidParameterException: \"Não é possível reenviar o código, pois não há e-mail registrado / verificado.\",\n        LimitExceededException: \"Número de tentativas excedida, tente depois de algum tempo.\"\n      };\n      return props.alert.error(selectMessageError[err.code] || defaultMessage);\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(PageContainer, {\n    register: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"containerCodConfirm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"lightBox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"lightBoxContent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Email,\n    alt: \"Icone email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Confirme seu e-mail\"), React.createElement(\"p\", {\n    className: \"paragraph\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Enviamos um c\\xF3digo de confirma\\xE7\\xE3o por e-mail para voc\\xEA. Por favor, digite-o abaixo.\"), React.createElement(Form, {\n    className: \"formConfirm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"inputInline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(FormField, {\n    id: \"codConfirm\",\n    type: \"text\",\n    name: \"codigo\",\n    label: \"C\\xF3digo de confirma\\xE7\\xE3o\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    className: \"btnDefault\",\n    type: \"submit\",\n    style: atv(),\n    disabled: !props.isValid,\n    required: props.isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Confirmar\"), React.createElement(\"button\", {\n    className: \"btnSecundary\",\n    type: \"submit\",\n    onClick: resendCode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Reenviar C\\xF3digo\")))))));\n\n  function atv() {\n    const x = props.isValid;\n\n    if (x === true) {\n      return {\n        background: \"#000\"\n      };\n    } else {\n      return {\n        background: \"#BBB\"\n      };\n    }\n  }\n};\n\nconst ConfirmSignupForm = withRouter(withFormik({\n  mapPropsToValues({\n    codigo\n  }) {\n    return {\n      codigo: codigo || \"\"\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    codigo: Yup.string().required(\"Campo obrigatório\").length(6, \"Codigo inválido\")\n  }),\n\n  handleSubmit({\n    codigo\n  }, {\n    props,\n    setFieldError,\n    setSubmitting\n  }) {\n    setSubmitting(true);\n\n    if (props.location.state.pathname === \"/esqueci-senha\") {\n      props.history.push(\"/nova-senha\", {\n        email: props.history.location.state.email,\n        code: codigo\n      });\n    } else {\n      Auth.confirmSignUp(props.history.location.state.email, codigo.toString()).then(result => {\n        setSubmitting(false);\n        Auth.signIn(props.history.location.state.email, props.history.location.state.senha).then(response => {\n          props.alert.success(\"E-mail validado com sucesso!\");\n          props.history.push(\"/seus-dados\", {\n            initCadastro: props.history.location.state.email,\n            senha: props.history.location.state.senha,\n            codigoconfimacao: codigo\n          });\n          console.log(\"Minhas props no codigo de confirmação são\", props.history.location);\n        }).catch(error => {\n          console.log(\"Erro \", error);\n          const messageDefault = \"Ocorreu um erro inesperado.\";\n          const selectErrorMessage = {\n            NotAuthorizedException: \"E-mail ou senha incorretos.\",\n            UserNotFoundException: \"O usuário não foi encontrado.\",\n            PasswordResetRequiredException: 'A sua senha foi resetada. Crie uma nova em \"esqueci minha senha\".',\n            InvalidPasswordException: \"A senha deve conter ao mínimo 8 dígitos.\"\n          };\n          return props.alert.error(selectErrorMessage[error.code] || messageDefault);\n        });\n      }).catch(error => {\n        console.log(\"Erro confirmando assinatura: \", error);\n        props.alert.error(\"Codigo de confirmação invalido\");\n        setSubmitting(false);\n      });\n    }\n  }\n\n})(confirmSignUp));\nexport default withAlert()(ConfirmSignupForm);","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/pages/CodConfirmacao/index.js"],"names":["React","withRouter","withAlert","Auth","Form","withFormik","Yup","PageContainer","Email","FormField","confirmSignUp","props","resendCode","ev","preventDefault","forgotPassword","history","location","state","email","then","data","alert","success","catch","err","console","log","defaultMessage","selectMessageError","InvalidParameterException","LimitExceededException","error","code","atv","isValid","isSubmitting","x","background","ConfirmSignupForm","mapPropsToValues","codigo","validationSchema","object","shape","string","required","length","handleSubmit","setFieldError","setSubmitting","pathname","push","toString","result","signIn","senha","response","initCadastro","codigoconfimacao","messageDefault","selectErrorMessage","NotAuthorizedException","UserNotFoundException","PasswordResetRequiredException","InvalidPasswordException"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { withAlert } from 'react-alert';\nimport { Auth } from \"aws-amplify\";\nimport { Form, withFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport PageContainer from \"../../components/features/PageContainer\";\nimport Email from \"../../assets/icons/email.png\";\nimport FormField from \"../../components/elements/FormField\";\n\nimport \"./styles.scss\";\n\nconst confirmSignUp = (props) => {\n  \n  const resendCode = ev => {\n    ev.preventDefault()\n    Auth.forgotPassword(props.history.location.state.email)\n    .then(data => {\n        props.alert.success('Codigo enviado');\n    })\n    .catch(err => {\n        console.log('ERROR', err);\n        const defaultMessage = \"Erro ao reenviar o código, tente novamento mais tarde\";\n        const selectMessageError = {\n          InvalidParameterException: \"Não é possível reenviar o código, pois não há e-mail registrado / verificado.\",\n          LimitExceededException: \"Número de tentativas excedida, tente depois de algum tempo.\",\n        }\n        return props.alert.error(selectMessageError[err.code] || defaultMessage);\n      });\n  }\n\n  return (\n    <>\n      <PageContainer register={true}>\n        <div className=\"containerCodConfirm\">\n          <div className=\"lightBox\">\n            <div className=\"lightBoxContent\">\n              <img src={Email} alt=\"Icone email\" />\n              <h3>Confirme seu e-mail</h3>\n              <p className=\"paragraph\">\n                Enviamos um código de confirmação por e-mail para você. Por favor, digite-o abaixo.\n              </p>\n              <Form className=\"formConfirm\">\n                <div className=\"inputInline\">\n                  <FormField\n                    id=\"codConfirm\"\n                    type=\"text\"\n                    name=\"codigo\"\n                    label=\"Código de confirmação\"\n                  />\n                </div>\n                <button\n                  className=\"btnDefault\"\n                  type=\"submit\"\n                  style={atv()}\n                  disabled={!props.isValid}\n                  required={props.isSubmitting}\n                >\n                  Confirmar\n                </button>\n                <button \n                className=\"btnSecundary\" \n                type=\"submit\"\n                onClick={resendCode}\n                >\n                  Reenviar Código\n                </button>\n              </Form>\n            </div>\n          </div>\n        </div>\n      </PageContainer>\n    </>\n  );\n  function atv() {\n    const x = props.isValid;\n    if (x === true) {\n      return { background: `#000` };\n    } else {\n      return { background: `#BBB` };\n    }\n  }\n};\n\nconst ConfirmSignupForm = withRouter(\n  withFormik({\n    mapPropsToValues({ codigo }) {\n      return {\n        codigo: codigo || \"\",\n      };\n    },\n    validationSchema: Yup.object().shape({\n      codigo: Yup.string()\n        .required(\"Campo obrigatório\")\n        .length(6, \"Codigo inválido\"),\n    }),\n    handleSubmit({ codigo }, { props, setFieldError, setSubmitting }) {\n      setSubmitting(true);\n      \n      if(props.location.state.pathname === \"/esqueci-senha\") {\n        props.history.push(\"/nova-senha\", {email: props.history.location.state.email, code: codigo})\n      } else {\n      Auth.confirmSignUp(props.history.location.state.email, codigo.toString())\n        .then((result) => {\n          setSubmitting(false);\n          Auth.signIn(\n            props.history.location.state.email,\n            props.history.location.state.senha\n          )\n            .then((response) => {\n              props.alert.success(\"E-mail validado com sucesso!\");\n              props.history.push(\"/seus-dados\", {\n                initCadastro: props.history.location.state.email,\n                senha: props.history.location.state.senha,\n                codigoconfimacao: codigo,\n              });\n              console.log(\n                \"Minhas props no codigo de confirmação são\",\n                props.history.location\n              );\n            })\n            .catch((error) => {\n              console.log(\"Erro \", error);\n              const messageDefault = \"Ocorreu um erro inesperado.\";\n            \n              const selectErrorMessage = {\n                NotAuthorizedException: \"E-mail ou senha incorretos.\",\n                UserNotFoundException: \"O usuário não foi encontrado.\",\n                PasswordResetRequiredException:\n                  'A sua senha foi resetada. Crie uma nova em \"esqueci minha senha\".',\n                InvalidPasswordException:\n                  \"A senha deve conter ao mínimo 8 dígitos.\",\n              };\n\n              return props.alert.error(selectErrorMessage[error.code] || messageDefault);\n            });\n        })\n        .catch((error) => {\n          console.log(\"Erro confirmando assinatura: \", error);\n          props.alert.error(\"Codigo de confirmação invalido\");\n          setSubmitting(false);\n        });\n      }\n    },\n  })(confirmSignUp)\n);\n\nexport default withAlert()(ConfirmSignupForm);\n"]},"metadata":{},"sourceType":"module"}