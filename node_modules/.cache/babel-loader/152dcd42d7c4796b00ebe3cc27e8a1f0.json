{"ast":null,"code":"var _jsxFileName = \"/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/components/Cadastro/InicioDoCadastro/index.js\";\nimport React from 'react';\nimport { withFormik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport logoPlaystars from \"./../img/logo_final.svg\";\nimport './styles.scss';\nimport { withRouter } from 'react-router-dom';\nimport FormField from \"../FormField\";\nimport { Auth } from \"aws-amplify\";\nFormField.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string\n}; // const schema = Yup.object().shape({\n//     email: Yup.string().email('Email invalido!').required()\n// })\n// const enhanceWithFormik = withFormik({\n//   mapPropsToValues: () => ({ email: '', senha: '', repitaSenha: ''}),\n//   isInitialValid: false,\n//   validateOnChange: true,\n//   validateOnBlur: true,\n//   displayName: 'InitCadastro',\n//   validationSchema: schema\n// });\n\nconst Signup = props => // state = {\n//     btn_disabled: true,\n//     btn_color: '#BBB',\n// };\n// on_input (i) {\n//     const target = i.target;\n//     const habilitar = target.value.length;\n//     if (habilitar > 6) {\n//         this.setState({ btn_disabled: false});\n//         this.setState({ btn_color: '#000'})\n//     } else {\n//         this.setState({ btn_disabled: true});\n//         this.setState({ btn_color: '#BBB'})\n//     }\n// }  \n// render() {\n//     return (\nReact.createElement(React.Fragment, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55\n  },\n  __self: this\n}, React.createElement(\"section\", {\n  className: \"telaCadastro\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  className: \"cadastro\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 57\n  },\n  __self: this\n}, React.createElement(\"img\", {\n  className: \"logoPrincipal\",\n  src: logoPlaystars,\n  alt: \"Logo PlayStarts\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 58\n  },\n  __self: this\n}), React.createElement(\"h2\", {\n  className: \"tituloLogo\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59\n  },\n  __self: this\n}, \"Ol\\xE1 Vamos come\\xE7ar seu cadastro?\"), React.createElement(Form, {\n  className: \"dados\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60\n  },\n  __self: this\n}, React.createElement(ErrorMessage, {\n  className: \"error\",\n  component: \"span\",\n  name: \"email\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61\n  },\n  __self: this\n}), React.createElement(\"fieldset\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62\n  },\n  __self: this\n}, React.createElement(Field, {\n  id: \"email\",\n  type: \"email\",\n  name: \"email\",\n  required: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63\n  },\n  __self: this\n}), React.createElement(\"label\", {\n  className: \"label\",\n  htmlFor: \"email\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64\n  },\n  __self: this\n}, \"Email\")), React.createElement(\"fieldset\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66\n  },\n  __self: this\n}, React.createElement(Field, {\n  id: \"senha\",\n  type: \"password\",\n  name: \"senha\",\n  required: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 67\n  },\n  __self: this\n}), React.createElement(\"label\", {\n  className: \"label\",\n  htmlFor: \"senha\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68\n  },\n  __self: this\n}, \"Senha\")), React.createElement(\"fieldset\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 70\n  },\n  __self: this\n}, React.createElement(Field, {\n  id: \"repitaSenha\",\n  type: \"password\",\n  name: \"senha2\",\n  required: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 71\n  },\n  __self: this\n}), React.createElement(\"label\", {\n  className: \"label\",\n  htmlFor: \"RepitaSenha\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 72\n  },\n  __self: this\n}, \"Repita a senha\")), React.createElement(\"button\", {\n  className: \"continuar\",\n  type: \"submit\",\n  disabled: props.isSubmitting,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 74\n  },\n  __self: this\n}, \"Continuar\"))))) //     )\n// }\n;\n\nconst SignupForm = withRouter(withFormik({\n  mapPropsToValues({\n    email,\n    senha,\n    senha2\n  }) {\n    return {\n      email: email || '',\n      senha: senha || '',\n      senha2: senha2 || ''\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    email: Yup.string().required(\"Campo obrigatório\").email('Email inválido'),\n    senha: Yup.string().required(\"Campo obrigatório\"),\n    senha2: Yup.string().required(\"Campo obrigatório\")\n  }),\n\n  handleSubmit({\n    email,\n    senha,\n    senha2\n  }, {\n    props,\n    setFieldError,\n    setSubmitting\n  }) {\n    console.log(props);\n\n    if (senha !== senha2) {\n      setFieldError(\"senha\", \"As senhas digitadas não estão idênticas.\");\n      setFieldError(\"senha2\", \"As senhas digitadas não estão idênticas.\");\n      return;\n    }\n\n    setSubmitting(true);\n    Auth.signUp(email, senha).then(result => {\n      props.history.push('/', {\n        email: email\n      });\n    }).catch(error => {\n      switch (error.code) {\n        case \"UsernameExistsException\":\n          setFieldError(\"email\", \"Email já está em uso.\");\n          break;\n\n        default:\n          console.log('Erro fazendo signup: ', error);\n          window.alert('Erro fazendo signup');\n          break;\n      }\n\n      setSubmitting(false);\n    });\n  }\n\n})(Signup));\nexport default SignupForm;","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/components/Cadastro/InicioDoCadastro/index.js"],"names":["React","withFormik","Form","Field","ErrorMessage","Yup","PropTypes","withRouter","FormField","Auth","propTypes","id","string","isRequired","name","label","type","Signup","props","logoPlaystars","isSubmitting","SignupForm","mapPropsToValues","email","senha","senha2","validationSchema","object","shape","required","handleSubmit","setFieldError","setSubmitting","console","log","signUp","then","result","history","push","catch","error","code","window","alert"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withFormik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\n\nimport logoPlaystars from './../img/logo_final.svg';\nimport './styles.scss';\nimport { withRouter } from 'react-router-dom';\nimport FormField from \"../FormField\";\nimport { Auth } from \"aws-amplify\";\n\nFormField.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    type: PropTypes.string,\n  };\n\n// const schema = Yup.object().shape({\n//     email: Yup.string().email('Email invalido!').required()\n// })\n\n// const enhanceWithFormik = withFormik({\n//   mapPropsToValues: () => ({ email: '', senha: '', repitaSenha: ''}),\n//   isInitialValid: false,\n//   validateOnChange: true,\n//   validateOnBlur: true,\n//   displayName: 'InitCadastro',\n//   validationSchema: schema\n// });\n\nconst Signup = (props) => (\n\n    // state = {\n    //     btn_disabled: true,\n    //     btn_color: '#BBB',\n    // };\n     \n    // on_input (i) {\n    //     const target = i.target;\n    //     const habilitar = target.value.length;\n\n    //     if (habilitar > 6) {\n    //         this.setState({ btn_disabled: false});\n    //         this.setState({ btn_color: '#000'})\n    //     } else {\n    //         this.setState({ btn_disabled: true});\n    //         this.setState({ btn_color: '#BBB'})\n    //     }\n    // }  \n\n    // render() {\n    //     return (\n\n            <React.Fragment>\n                <section className=\"telaCadastro\">\n                    <div className=\"cadastro\">\n                        <img className=\"logoPrincipal\" src={logoPlaystars} alt=\"Logo PlayStarts\" />\n                        <h2 className=\"tituloLogo\">Olá Vamos começar seu cadastro?</h2>           \n                        <Form className=\"dados\">\n                            <ErrorMessage className=\"error\" component=\"span\" name=\"email\"/>\n                            <fieldset>\n                                <Field id=\"email\" type=\"email\" name=\"email\" required/>\n                                <label className=\"label\" htmlFor=\"email\">Email</label>\n                            </fieldset>\n                            <fieldset>\n                                <Field id=\"senha\" type=\"password\" name=\"senha\" required/>\n                                <label className=\"label\" htmlFor=\"senha\">Senha</label>\n                            </fieldset>\n                            <fieldset>\n                                <Field id=\"repitaSenha\" type=\"password\" name=\"senha2\" required/>\n                                <label className=\"label\" htmlFor=\"RepitaSenha\">Repita a senha</label>\n                            </fieldset>\n                            <button className=\"continuar\" type=\"submit\" disabled={props.isSubmitting}>Continuar</button>\n                        </Form>\n                    </div>\n                </section>\n            </React.Fragment>\n    //     )\n    // }\n)\n\nconst SignupForm = withRouter(withFormik({\n    mapPropsToValues({\n                       email,\n                       senha,\n                       senha2\n                     }) {\n      return {\n        email: email || '',\n        senha: senha || '',\n        senha2: senha2 || ''\n      }\n    },\n    validationSchema: Yup.object().shape({\n      email: Yup.string()\n        .required(\"Campo obrigatório\")\n        .email('Email inválido'),\n      senha: Yup.string()\n        .required(\"Campo obrigatório\"),\n      senha2: Yup.string()\n        .required(\"Campo obrigatório\")\n    }),\n    handleSubmit({ email, senha, senha2 }, { props, setFieldError, setSubmitting }) {\n      console.log(props);\n      if(senha !== senha2) {\n        setFieldError(\"senha\", \"As senhas digitadas não estão idênticas.\");\n        setFieldError(\"senha2\", \"As senhas digitadas não estão idênticas.\");\n        return;\n      }\n      setSubmitting(true);\n  \n      Auth.signUp(email, senha)\n        .then((result) => {\n          props.history.push('/', { email: email });\n        })\n        .catch(error => {\n          switch(error.code) {\n            case \"UsernameExistsException\":\n              setFieldError(\"email\", \"Email já está em uso.\");\n              break;\n            default:\n              console.log('Erro fazendo signup: ', error);\n              window.alert('Erro fazendo signup');\n              break;\n  \n          }\n          setSubmitting(false);\n  \n        });\n    }\n  })(Signup));\n  \n  export default SignupForm;"]},"metadata":{},"sourceType":"module"}