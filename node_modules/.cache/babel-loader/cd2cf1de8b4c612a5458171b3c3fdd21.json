{"ast":null,"code":"import _slicedToArray from \"/Users/luciano/Desktop/Projetos/PlayerStars/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/components/Cadastro/Consoles/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { ErrorMessage, Field, Form, withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { API, Auth } from \"aws-amplify\";\nimport { withRouter } from \"react-router-dom\";\nimport config from \"../../../config/constants\";\nimport TimelineCadastro from '../TimelineCadastro';\nimport './styles.scss';\n\nfunction ConsoleComponet(props) {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        consoles = _useState2[0],\n        setConsoles = _useState2[1];\n\n  useEffect(() => {\n    API.get(config.APIS.PLAYERSTARS, '/console/').then(response => {\n      setConsoles(response.data);\n    }).catch(error => {\n      console.log(\"ERRO NO GET: \", consoles);\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(TimelineCadastro, {\n    current: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(\"section\", {\n    className: \"telaConsole\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"consoles\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"titleH3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Insira a Tagname de suas plataformas\"), React.createElement(Form, {\n    className: \"dadosConsole\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(ErrorMessage, {\n    className: \"error\",\n    component: \"span\",\n    name: \"pc\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), consoles.length > 0 ? consoles.map((platform, index) => React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"pc\",\n    type: \"text\",\n    name: \"pc\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: \"pc\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Tagname do PC\"))) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"continuar\",\n    type: \"submit\",\n    style: atv(),\n    disabled: !props.isValid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Continuar\")))));\n\n  function atv() {\n    const x = props.isValid;\n\n    if (x === true) {\n      return {\n        background: \"#000\"\n      };\n    } else {\n      return {\n        background: \"#BBB\"\n      };\n    }\n  }\n\n  ;\n}\n\nconst enhanceWithFormik = withRouter(withFormik({\n  mapPropsToValues: () => ({\n    pc: '',\n    playstation: '',\n    xbox: ''\n  }),\n  validationSchema: Yup.object().shape({\n    pc: Yup.string(),\n    playstation: Yup.string(),\n    xbox: Yup.string()\n  }),\n\n  handleSubmit(values, {\n    props\n  }) {\n    console.log('HandlingSubmit. props.history.locatin: ', props.history.location);\n    Auth.currentAuthenticatedUser().then(response => {\n      const dados = props.history.location.state.user;\n      const options = {\n        body: {\n          user: {\n            name: dados.nome,\n            email: response.attributes.email,\n            date_birth: dados.nascimento,\n            street: dados.rua,\n            street_number: dados.numero,\n            street_complement: dados.complemento,\n            neighborhood: dados.bairro,\n            city: dados.cidade,\n            state: dados.estado,\n            country: \"Brasil\",\n            postal_code: dados.cep,\n            phone_number: dados.tel,\n            cpf: dados.cpf,\n            nickname: dados.nickname,\n            profile_image: ''\n          },\n          favorites: [],\n          blue_star_balance: 0,\n          points: 0,\n          golden_star_balance: 0,\n          consoles: [{\n            entity_id: \"1\",\n            name: \"PS 4\",\n            logo_path: \"teste.jpeg\",\n            tag_name: \"007\",\n            games: []\n          }, {\n            entity_id: \"11\",\n            name: \"PS 4\",\n            logo_path: \"teste.jpeg\",\n            tag_name: \"007\",\n            games: []\n          }, {\n            entity_id: \"12\",\n            name: \"PS 4\",\n            logo_path: \"teste.jpeg\",\n            tag_name: \"007\",\n            games: []\n          }],\n          states_regions: [],\n          countries_regions: [],\n          star_transactions: []\n        }\n      };\n      API.post(config.APIS.PLAYERSTARS, '/player', options).then(response => {\n        console.log(\" then : \", response);\n        props.history.push('/termos', options);\n      }).catch(error => {\n        console.log('Esse é o retorno das options', options);\n        console.log('Resultado do response: ', response);\n        console.log('Erro postando dados do usuário: ', error);\n        window.alert('Erro fazendo post dos dados do usuário.');\n      });\n    }).catch(error => {\n      console.log(\"Erro obtendo usuario atual\", error);\n    });\n  }\n\n})(ConsoleComponet));\nexport default enhanceWithFormik;","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/components/Cadastro/Consoles/index.js"],"names":["React","useState","useEffect","ErrorMessage","Field","Form","withFormik","Yup","API","Auth","withRouter","config","TimelineCadastro","ConsoleComponet","props","consoles","setConsoles","get","APIS","PLAYERSTARS","then","response","data","catch","error","console","log","length","map","platform","index","atv","isValid","x","background","enhanceWithFormik","mapPropsToValues","pc","playstation","xbox","validationSchema","object","shape","string","handleSubmit","values","history","location","currentAuthenticatedUser","dados","state","user","options","body","name","nome","email","attributes","date_birth","nascimento","street","rua","street_number","numero","street_complement","complemento","neighborhood","bairro","city","cidade","estado","country","postal_code","cep","phone_number","tel","cpf","nickname","profile_image","favorites","blue_star_balance","points","golden_star_balance","entity_id","logo_path","tag_name","games","states_regions","countries_regions","star_transactions","post","push","window","alert"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { ErrorMessage, Field, Form, withFormik } from 'formik'\nimport * as Yup from 'yup'\nimport { API, Auth } from \"aws-amplify\"\nimport { withRouter } from \"react-router-dom\"\nimport config from \"../../../config/constants\"\nimport TimelineCadastro from '../TimelineCadastro';\n\nimport './styles.scss'\n\nfunction ConsoleComponet(props) {\n\n    const [consoles, setConsoles] = useState(\"\")\n\n    useEffect(() => {\n        API.get(config.APIS.PLAYERSTARS, '/console/')\n            .then(response => {\n                setConsoles(response.data);\n            })\n            .catch(error => {\n                console.log(\"ERRO NO GET: \", consoles)\n            })\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n    return (\n        <>\n            <TimelineCadastro current={3} />\n            <section className=\"telaConsole\">\n                <div className=\"consoles\">\n                    <h3 className=\"titleH3\">Insira a Tagname de suas plataformas</h3>\n                    <Form className=\"dadosConsole\">\n                        <ErrorMessage className=\"error\" component=\"span\" name=\"pc\" />\n                        {consoles.length > 0 ?\n                            consoles.map((platform, index) => (\n                                <fieldset>\n                                <Field id=\"pc\" type=\"text\" name=\"pc\" />\n                                <label className=\"label\" htmlFor=\"pc\">Tagname do PC</label>\n                            </fieldset>\n                            )) : <div></div>\n                        }\n                        <button\n                            className=\"continuar\"\n                            type=\"submit\"\n                            style={atv()}\n                            disabled={!props.isValid}\n                        >Continuar\n                        </button>\n                    </Form>\n                </div>\n            </section>\n        </>\n    )\n    \n    function atv() {\n        const x = props.isValid;\n        if (x === true) { return ({ background: `#000` }) } else { return ({ background: `#BBB` }) }\n    };\n}\n\nconst enhanceWithFormik = withRouter(withFormik({\n    mapPropsToValues: () => ({\n        pc: '',\n        playstation: '',\n        xbox: ''\n    }),\n\n    validationSchema: Yup.object().shape({\n        pc: Yup.string(),\n        playstation: Yup.string(),\n        xbox: Yup.string(),\n\n    }),\n    handleSubmit(values, { props }) {\n        console.log('HandlingSubmit. props.history.locatin: ', props.history.location)\n        Auth.currentAuthenticatedUser()\n            .then(response => {\n                const dados = props.history.location.state.user;\n                const options = {\n                    body: {\n                        user: {\n                            name: dados.nome,\n                            email: response.attributes.email,\n                            date_birth: dados.nascimento,\n                            street: dados.rua,\n                            street_number: dados.numero,\n                            street_complement: dados.complemento,\n                            neighborhood: dados.bairro,\n                            city: dados.cidade,\n                            state: dados.estado,\n                            country: \"Brasil\",\n                            postal_code: dados.cep,\n                            phone_number: dados.tel,\n                            cpf: dados.cpf,\n                            nickname: dados.nickname,\n                            profile_image: ''\n                        },\n\n                        favorites: [],\n                        blue_star_balance: 0,\n                        points: 0,\n                        golden_star_balance: 0,\n                        consoles: [\n                            {\n                                entity_id: \"1\",\n                                name: \"PS 4\",\n                                logo_path: \"teste.jpeg\",\n                                tag_name: \"007\",\n                                games: []\n                            },\n                            {\n                                entity_id: \"11\",\n                                name: \"PS 4\",\n                                logo_path: \"teste.jpeg\",\n                                tag_name: \"007\",\n                                games: []\n\n                            },\n                            {\n                                entity_id: \"12\",\n                                name: \"PS 4\",\n                                logo_path: \"teste.jpeg\",\n                                tag_name: \"007\",\n                                games: []\n\n                            }\n                        ],\n\n                        states_regions: [],\n                        countries_regions: [],\n\n                        star_transactions: [],\n                    }\n                }\n\n                API.post(config.APIS.PLAYERSTARS, '/player', options)\n                    .then(response => {\n                        console.log(\" then : \", response)\n                        props.history.push('/termos', options);\n                    })\n                    .catch(error => {\n                        console.log('Esse é o retorno das options', options);\n                        console.log('Resultado do response: ', response);\n                        console.log('Erro postando dados do usuário: ', error);\n                        window.alert('Erro fazendo post dos dados do usuário.');\n                    })\n            })\n            .catch(error => {\n                console.log(\"Erro obtendo usuario atual\", error)\n            })\n    }\n})(ConsoleComponet));\n\nexport default enhanceWithFormik;"]},"metadata":{},"sourceType":"module"}