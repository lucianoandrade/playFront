{"ast":null,"code":"import _slicedToArray from \"/Users/luciano/Desktop/Projetos/PlayerStars/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/components/Ranking/Filter/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { API } from \"aws-amplify\";\nimport config from \"../../../config/constants\"; // import { useSelector } from 'react-redux'\n\nimport Select from '../../Select/index';\nimport './styles.scss';\n\nfunction Filter(props) {\n  // let consolesRedux = useSelector(state => state.user.data.consoles)\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        consolesRedux = _useState2[0],\n        setConsolesRedux = _useState2[1];\n\n  let currentConsoleGames;\n  let FormattedJSONConsolesGames;\n  useEffect(() => {\n    API.get(config.APIS.PLAYERSTARS, '/player/get-my-profile').then(response => {\n      console.log(\"RESULTADO DO GET: \", response.data);\n      setConsolesRedux(response.data.consoles);\n    }).catch(error => {\n      console.log(\"ERRO NO GET: \", error);\n    });\n    let FormattedJSONConsoles = formattedConsoleGeneric(consolesRedux);\n    let currentConsoleGames = !!plataformSelected.length && FormattedJSONConsoles.find(specificConsole => specificConsole.name === plataformSelected).games;\n    let FormattedJSONConsolesGames = !!plataformSelected.length && formattedConsoleGeneric(currentConsoleGames);\n  }, []);\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        plataformSelected = _useState4[0],\n        setPlataformSelected = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        gameSelected = _useState6[0],\n        setGameSelected = _useState6[1];\n\n  let formattedConsoleGeneric = JSONValue => {\n    return JSONValue.map(consoleJSON => {\n      consoleJSON.value = consoleJSON.entity_id;\n      consoleJSON.label = consoleJSON.name;\n      return consoleJSON;\n    });\n  };\n\n  useEffect(() => {\n    changePlatform(FormattedJSONConsoles[0]); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    if (plataformSelected && !gameSelected) changeGame(FormattedJSONConsolesGames[0]); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [plataformSelected]);\n\n  function changePlatform(c) {\n    console.log(\"PLATFORM :: \", c);\n    setPlataformSelected(c.name);\n    props.setFilter(\"platform\", c);\n  }\n\n  function changeGame(c) {\n    console.log(\"GAME :: \", c);\n    setGameSelected(c.name);\n    props.setFilter(\"game\", c);\n    console.log(\":::GAME JOGO::::::\", gameSelected);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"containerFilter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"containerSelects\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"containerSelect\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Select, {\n    onChange: changePlatform,\n    width: '150px',\n    placeholder: FormattedJSONConsoles.find(item => item.name === plataformSelected) ? plataformSelected : 'Plataforma',\n    options: FormattedJSONConsoles,\n    classNames: 'select-class',\n    name: \"platform\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"containerSelect\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(Select, {\n    onChange: changeGame,\n    width: '150px',\n    placeholder: FormattedJSONConsolesGames && FormattedJSONConsolesGames.find(item => item.name === gameSelected) ? gameSelected : 'Jogo',\n    options: !!plataformSelected.length ? FormattedJSONConsolesGames : [],\n    classNames: 'select-class',\n    name: \"game\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }))));\n}\n\nexport default Filter;","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/components/Ranking/Filter/index.js"],"names":["React","useState","useEffect","API","config","Select","Filter","props","consolesRedux","setConsolesRedux","currentConsoleGames","FormattedJSONConsolesGames","get","APIS","PLAYERSTARS","then","response","console","log","data","consoles","catch","error","FormattedJSONConsoles","formattedConsoleGeneric","plataformSelected","length","find","specificConsole","name","games","setPlataformSelected","gameSelected","setGameSelected","JSONValue","map","consoleJSON","value","entity_id","label","changePlatform","changeGame","c","setFilter","item"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {API} from \"aws-amplify\";\nimport config from \"../../../config/constants\";\n// import { useSelector } from 'react-redux'\nimport Select from '../../Select/index';\n\nimport './styles.scss';\n\nfunction Filter(props) {\n    \n    // let consolesRedux = useSelector(state => state.user.data.consoles)\n    const [consolesRedux, setConsolesRedux] = useState([])\n    let currentConsoleGames;\n    let FormattedJSONConsolesGames;\n    useEffect(() => {\n        API.get(config.APIS.PLAYERSTARS, '/player/get-my-profile')\n            .then(response => {\n                console.log(\"RESULTADO DO GET: \", response.data)\n                setConsolesRedux(response.data.consoles)\n            })\n            .catch(error => {\n                console.log(\"ERRO NO GET: \", error)\n            })\n            let FormattedJSONConsoles = formattedConsoleGeneric(consolesRedux);\n            let currentConsoleGames = !!plataformSelected.length && FormattedJSONConsoles.find((specificConsole) => specificConsole.name === plataformSelected).games\n            let FormattedJSONConsolesGames = !!plataformSelected.length && formattedConsoleGeneric(currentConsoleGames)\n    },[])\n\n    const [plataformSelected, setPlataformSelected] = useState('')\n    const [gameSelected, setGameSelected] = useState('')\n    \n    let formattedConsoleGeneric = (JSONValue) => {\n        return JSONValue.map((consoleJSON) => {\n            consoleJSON.value = consoleJSON.entity_id;\n            consoleJSON.label = consoleJSON.name;\n            return consoleJSON\n        })\n    }\n\n\n    useEffect(() => {\n        changePlatform(FormattedJSONConsoles[0])\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        if(plataformSelected && !gameSelected)\n        changeGame(FormattedJSONConsolesGames[0])\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [plataformSelected])\n\n    function changePlatform(c) {\n        console.log(\"PLATFORM :: \", c)\n        setPlataformSelected(c.name)\n        props.setFilter(\"platform\", c)\n    }\n\n    function changeGame(c) {\n        console.log(\"GAME :: \", c)\n            setGameSelected(c.name)\n            props.setFilter(\"game\", c)\n            console.log(\":::GAME JOGO::::::\", gameSelected)\n    }\n\n    return (\n        <div className=\"containerFilter\">\n            <div className=\"containerSelects\">\n                <div className=\"containerSelect\">\n                    <Select\n                        onChange={changePlatform}\n                        width={'150px'}\n                        placeholder={FormattedJSONConsoles.find(item => item.name === plataformSelected) ? plataformSelected : 'Plataforma'}\n                        options={FormattedJSONConsoles}\n                        classNames={'select-class'}\n                        name=\"platform\"\n                    />\n                </div>\n                <div className=\"containerSelect\">\n                    <Select\n                        onChange={changeGame}\n                        width={'150px'}\n                        placeholder={FormattedJSONConsolesGames && FormattedJSONConsolesGames.find(item => item.name === gameSelected) ? gameSelected : 'Jogo'}\n                        options={!!plataformSelected.length ? FormattedJSONConsolesGames : []}\n                        classNames={'select-class'}\n                        name=\"game\"\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Filter;"]},"metadata":{},"sourceType":"module"}