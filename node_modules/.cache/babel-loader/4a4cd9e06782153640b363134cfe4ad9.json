{"ast":null,"code":"import _slicedToArray from \"/Users/luciano/Desktop/Projetos/PlayerStars/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/components/Perfil/EditarConsoles/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { API } from \"aws-amplify\";\nimport config from \"../../../config/constants\";\nimport { useSelector } from 'react-redux';\nimport { withRouter, Redirect } from \"react-router-dom\";\nimport { withFormik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport './styles.scss';\n\nfunction EditarConsoles() {\n  const currentConsoles = useSelector(state => state.user.data.consoles);\n  console.log(currentConsoles);\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        userConsole = _useState2[0],\n        setUserConsole = _useState2[1];\n\n  useEffect(() => {\n    API.get(config.APIS.PLAYERSTARS, '/console/').then(response => {\n      console.log(\"ESSE E O RESPONSE\", response.data);\n      setUserConsole(response.data);\n    }).catch(error => {\n      console.log(\"ERRO NO GET: \");\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return React.createElement(\"section\", {\n    className: \"containerEditConsole\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"contentEditConsole\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"titleEditConsole\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Editar plataformas\"), React.createElement(\"p\", {\n    className: \"subTitleEditConsole\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Quais plataformas voc\\xEA usa?\"), React.createElement(\"form\", {\n    className: \"dadosConsole\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, userConsole.length > 0 ? userConsole.map((platform, index) => React.createElement(\"fieldset\", {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: platform.name,\n    type: \"text\",\n    name: platform.name,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"label\",\n    htmlFor: platform.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Tagname do \", platform.name))) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"containerBtn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btnCancel\",\n    type: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Cancelar\"), React.createElement(\"button\", {\n    className: \"btnSave\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Salvar altera\\xE7\\xF5es\")))));\n}\n\nconst SaveEdit = withRouter(withFormik({\n  mapPropsToValues({\n    name\n  }) {\n    return {\n      name: name || ''\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Digite seu nome completo!')\n  }),\n\n  handleSubmit(values, {\n    props,\n    setValues\n  }) {\n    const options = {\n      body: {\n        user: {\n          name: values.name\n        }\n      }\n    };\n    API.put(config.APIS.PLAYERSTARS, '/player', options).then(response => {\n      console.log(\":::::::OPTIONS:::::::\", options);\n      window.location.href = '/perfil';\n    }).catch(error => {\n      console.log(\":::::::OPTIONS:::::::\", options);\n      window.alert('Erro fazendo PUT dos usuario!');\n    });\n  }\n\n})(EditarConsoles));\nexport default SaveEdit;","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/components/Perfil/EditarConsoles/index.js"],"names":["React","useState","useEffect","API","config","useSelector","withRouter","Redirect","withFormik","Form","Field","ErrorMessage","Yup","EditarConsoles","currentConsoles","state","user","data","consoles","console","log","userConsole","setUserConsole","get","APIS","PLAYERSTARS","then","response","catch","error","length","map","platform","index","name","SaveEdit","mapPropsToValues","validationSchema","object","shape","string","required","handleSubmit","values","props","setValues","options","body","put","window","location","href","alert"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { API } from \"aws-amplify\"\nimport config from \"../../../config/constants\"\nimport { useSelector } from 'react-redux';\n\nimport { withRouter, Redirect } from \"react-router-dom\";\nimport { withFormik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\n\nimport './styles.scss';\n\nfunction EditarConsoles() {\n    const currentConsoles = useSelector(state => state.user.data.consoles);\n    console.log(currentConsoles)\n\n    const [userConsole, setUserConsole] = useState('');\n\n    useEffect(() => {\n        API.get(config.APIS.PLAYERSTARS, '/console/')\n            .then(response => {\n                console.log(\"ESSE E O RESPONSE\", response.data)\n                setUserConsole(response.data);\n            })\n            .catch(error => {\n                console.log(\"ERRO NO GET: \")\n            })\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n \n  return (\n    <section className=\"containerEditConsole\">\n        <div className=\"contentEditConsole\">\n            <h2 className=\"titleEditConsole\">Editar plataformas</h2>\n            <p className=\"subTitleEditConsole\">Quais plataformas vocÃª usa?</p>\n            <form className=\"dadosConsole\">\n                {userConsole.length > 0 ?\n                    userConsole.map((platform, index) => (\n                        <fieldset key={index}>\n                            <input \n                                id={platform.name} \n                                type=\"text\" \n                                name={platform.name} \n                                required/>\n                            <label className=\"label\" htmlFor={platform.name}>Tagname do {platform.name}</label>\n                        </fieldset>\n                    )) : <div></div>\n                }\n                <div className=\"containerBtn\">\n                    <button className=\"btnCancel\" type=\"button\">Cancelar</button>\n                    <button className=\"btnSave\" type=\"submit\" >Salvar alteraÃ§Ãµes</button>\n                </div>\n            </form>\n        </div>\n    </section>\n  );\n}\n\nconst SaveEdit = withRouter(withFormik({\n    mapPropsToValues({\n        name  \n    }) {\n        return {\n            name: name || ''\n        }\n    },\n    validationSchema: Yup.object().shape({\n        name: Yup.string().required('Digite seu nome completo!')\n    }),\n    handleSubmit(values, { props, setValues }) {\n        const options = {\n            body: {\n                user: {\n                    name: values.name\n                }\n            }\n        }\n        API.put(config.APIS.PLAYERSTARS, '/player', options)\n            .then(response => {\n                console.log(\":::::::OPTIONS:::::::\", options)\n                window.location.href = '/perfil'\n            })\n            .catch(error => {\n                console.log(\":::::::OPTIONS:::::::\", options)\n                window.alert('Erro fazendo PUT dos usuario!');\n            })\n    }\n})(EditarConsoles));\n\nexport default SaveEdit"]},"metadata":{},"sourceType":"module"}