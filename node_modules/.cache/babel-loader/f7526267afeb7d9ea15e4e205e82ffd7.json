{"ast":null,"code":"var _jsxFileName = \"/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/components/Cadastro/InicioDoCadastro/index.js\";\nimport React, { Component } from 'react';\nimport { withFormik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport logoPlaystars from \"./../img/logo_final.svg\";\nimport './styles.scss';\nimport { withRouter } from 'react-router-dom';\nimport FormField from \"../FormField\";\nimport { Auth } from \"aws-amplify\"; // FormField.propTypes = {\n//     id: PropTypes.string.isRequired,\n//     name: PropTypes.string.isRequired,\n//     label: PropTypes.string.isRequired,\n//     type: PropTypes.string,\n//   };\n// const schema = Yup.object().shape({\n//     email: Yup.string().email('Email invalido!').required()\n// })\n// const enhanceWithFormik = withFormik({\n//   mapPropsToValues: () => ({ email: '', senha: '', repitaSenha: ''}),\n//   isInitialValid: false,\n//   validateOnChange: true,\n//   validateOnBlur: true,\n//   displayName: 'InitCadastro',\n//   validationSchema: schema\n// });\n\nclass InitCadastro extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      btn_disabled: true,\n      btn_color: '#BBB'\n    };\n  }\n\n  on_input(i) {\n    const target = i.target;\n    const habilitar = target.value.length;\n\n    if (habilitar > 6) {\n      this.setState({\n        btn_disabled: false\n      });\n      this.setState({\n        btn_color: '#000'\n      });\n    } else {\n      this.setState({\n        btn_disabled: true\n      });\n      this.setState({\n        btn_color: '#BBB'\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"section\", {\n      className: \"telaCadastro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cadastro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"logoPrincipal\",\n      src: logoPlaystars,\n      alt: \"Logo PlayStarts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      className: \"tituloLogo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Ol\\xE1 Vamos come\\xE7ar seu cadastro?\"), React.createElement(Form, {\n      className: \"dados\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(ErrorMessage, {\n      className: \"error\",\n      component: \"span\",\n      name: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Field, {\n      id: \"email\",\n      type: \"email\",\n      name: \"email\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"label\",\n      htmlFor: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Email\")), React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Field, {\n      id: \"senha\",\n      type: \"password\",\n      name: \"senha\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"label\",\n      htmlFor: \"senha\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Senha\")), React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Field, {\n      id: \"repitaSenha\",\n      type: \"password\",\n      name: \"senha2\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"label\",\n      htmlFor: \"RepitaSenha\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Repita a senha\")), React.createElement(\"button\", {\n      className: \"continuar\",\n      type: \"submit\",\n      disabled: props.isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Continuar\")))));\n  }\n\n}\n\nconst SignupForm = withRouter(withFormik({\n  mapPropsToValues({\n    email,\n    senha,\n    senha2\n  }) {\n    return {\n      email: email || '',\n      senha: senha || '',\n      senha2: senha2 || ''\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    email: Yup.string().required(\"Campo obrigatório\").email('Email inválido'),\n    senha: Yup.string().required(\"Campo obrigatório\"),\n    senha2: Yup.string().required(\"Campo obrigatório\")\n  }),\n\n  handleSubmit({\n    email,\n    senha,\n    senha2\n  }, {\n    props,\n    setFieldError,\n    setSubmitting\n  }) {\n    console.log(props);\n\n    if (senha !== senha2) {\n      setFieldError(\"senha\", \"As senhas digitadas não estão idênticas.\");\n      setFieldError(\"senha2\", \"As senhas digitadas não estão idênticas.\");\n      return;\n    }\n\n    setSubmitting(true);\n    Auth.InitCadastro(email, senha).then(result => {\n      props.history.push('/', {\n        email: email\n      });\n    }).catch(error => {\n      switch (error.code) {\n        case \"UsernameExistsException\":\n          setFieldError(\"email\", \"Email já está em uso.\");\n          break;\n\n        default:\n          console.log('Erro fazendo signup: ', error);\n          window.alert('Erro fazendo signup');\n          break;\n      }\n\n      setSubmitting(false);\n    });\n  }\n\n})(InitCadastro));\nexport default InitCadastro;","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/PlayerStars/frontend/src/components/Cadastro/InicioDoCadastro/index.js"],"names":["React","Component","withFormik","Form","Field","ErrorMessage","Yup","PropTypes","withRouter","FormField","Auth","InitCadastro","state","btn_disabled","btn_color","on_input","i","target","habilitar","value","length","setState","render","logoPlaystars","props","isSubmitting","SignupForm","mapPropsToValues","email","senha","senha2","validationSchema","object","shape","string","required","handleSubmit","setFieldError","setSubmitting","console","log","then","result","history","push","catch","error","code","window","alert"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { withFormik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\n\nimport logoPlaystars from './../img/logo_final.svg';\nimport './styles.scss';\nimport { withRouter } from 'react-router-dom';\nimport FormField from \"../FormField\";\nimport { Auth } from \"aws-amplify\";\n\n// FormField.propTypes = {\n//     id: PropTypes.string.isRequired,\n//     name: PropTypes.string.isRequired,\n//     label: PropTypes.string.isRequired,\n//     type: PropTypes.string,\n//   };\n\n// const schema = Yup.object().shape({\n//     email: Yup.string().email('Email invalido!').required()\n// })\n\n// const enhanceWithFormik = withFormik({\n//   mapPropsToValues: () => ({ email: '', senha: '', repitaSenha: ''}),\n//   isInitialValid: false,\n//   validateOnChange: true,\n//   validateOnBlur: true,\n//   displayName: 'InitCadastro',\n//   validationSchema: schema\n// });\n\nclass InitCadastro extends Component {\n\n \n\n      state = {\n          btn_disabled: true,\n          btn_color: '#BBB',\n      };\n      \n      on_input (i) {\n          const target = i.target;\n          const habilitar = target.value.length;\n\n          if (habilitar > 6) {\n              this.setState({ btn_disabled: false});\n              this.setState({ btn_color: '#000'})\n          } else {\n              this.setState({ btn_disabled: true});\n              this.setState({ btn_color: '#BBB'})\n          }\n      }\n\n      render() {\n        return (\n\n            <React.Fragment>\n                <section className=\"telaCadastro\">\n                    <div className=\"cadastro\">\n                        <img className=\"logoPrincipal\" src={logoPlaystars} alt=\"Logo PlayStarts\" />\n                        <h2 className=\"tituloLogo\">Olá Vamos começar seu cadastro?</h2>           \n                        <Form className=\"dados\">\n                            <ErrorMessage className=\"error\" component=\"span\" name=\"email\"/>\n                            <fieldset>\n                                <Field id=\"email\" type=\"email\" name=\"email\" required/>\n                                <label className=\"label\" htmlFor=\"email\">Email</label>\n                            </fieldset>\n                            <fieldset>\n                                <Field id=\"senha\" type=\"password\" name=\"senha\" required/>\n                                <label className=\"label\" htmlFor=\"senha\">Senha</label>\n                            </fieldset>\n                            <fieldset>\n                                <Field id=\"repitaSenha\" type=\"password\" name=\"senha2\" required/>\n                                <label className=\"label\" htmlFor=\"RepitaSenha\">Repita a senha</label>\n                            </fieldset>\n                            <button className=\"continuar\" type=\"submit\" disabled={props.isSubmitting}>Continuar</button>\n                        </Form>\n                    </div>\n                </section>\n            </React.Fragment>\n        )\n      }\n}\n  \n  const SignupForm = withRouter(withFormik({\n      mapPropsToValues({\n                        email,\n                        senha,\n                        senha2\n                      }) {\n        return {\n          email: email || '',\n          senha: senha || '',\n          senha2: senha2 || ''\n        }\n      },\n      validationSchema: Yup.object().shape({\n        email: Yup.string()\n          .required(\"Campo obrigatório\")\n          .email('Email inválido'),\n        senha: Yup.string()\n          .required(\"Campo obrigatório\"),\n        senha2: Yup.string()\n          .required(\"Campo obrigatório\")\n      }),\n      handleSubmit({ email, senha, senha2 }, { props, setFieldError, setSubmitting }) {\n        console.log(props);\n        if(senha !== senha2) {\n          setFieldError(\"senha\", \"As senhas digitadas não estão idênticas.\");\n          setFieldError(\"senha2\", \"As senhas digitadas não estão idênticas.\");\n          return;\n        }\n        setSubmitting(true);\n    \n        Auth.InitCadastro(email, senha)\n          .then((result) => {\n            props.history.push('/', { email: email });\n          })\n          .catch(error => {\n            switch(error.code) {\n              case \"UsernameExistsException\":\n                setFieldError(\"email\", \"Email já está em uso.\");\n                break;\n              default:\n                console.log('Erro fazendo signup: ', error);\n                window.alert('Erro fazendo signup');\n                break;\n    \n            }\n            setSubmitting(false);\n    \n          });\n      }\n    })(InitCadastro));\n  \n  export default InitCadastro;"]},"metadata":{},"sourceType":"module"}